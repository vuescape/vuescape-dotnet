// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.155.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Vuescape.DotNet.Domain.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Reflection.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Recipes;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class TreeTableContentTest
    {
        private static readonly StringRepresentationTestScenarios<TreeTableContent> StringRepresentationTestScenarios = new StringRepresentationTestScenarios<TreeTableContent>()
            .AddScenario(() =>
                new StringRepresentationTestScenario<TreeTableContent>
                {
                    Name = "Default Code Generated Scenario",
                    SystemUnderTestExpectedStringRepresentationFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<TreeTableContent>();

                        var result = new SystemUnderTestExpectedStringRepresentation<TreeTableContent>
                        {
                            SystemUnderTest = systemUnderTest,
                            ExpectedStringRepresentation = Invariant($"Vuescape.DotNet.Domain.TreeTableContent: Headers = {systemUnderTest.Headers?.ToString() ?? "<null>"}, Rows = {systemUnderTest.Rows?.ToString() ?? "<null>"}, ShouldScrollVertical = {systemUnderTest.ShouldScrollVertical.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ShouldScrollHorizontal = {systemUnderTest.ShouldScrollHorizontal.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ShouldSyncHeaderScroll = {systemUnderTest.ShouldSyncHeaderScroll.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ShouldSyncFooterScroll = {systemUnderTest.ShouldSyncFooterScroll.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ShouldIncludeFooter = {systemUnderTest.ShouldIncludeFooter.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ShouldFreezeFirstColumn = {systemUnderTest.ShouldFreezeFirstColumn.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, DeadAreaColor = {systemUnderTest.DeadAreaColor?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, MaxRows = {systemUnderTest.MaxRows?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, CssStyle = {systemUnderTest.CssStyle?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}."),
                        };

                        return result;
                    },
                });

        private static readonly ConstructorArgumentValidationTestScenarios<TreeTableContent> ConstructorArgumentValidationTestScenarios = new ConstructorArgumentValidationTestScenarios<TreeTableContent>()
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<TreeTableContent>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'headers' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<TreeTableContent>();

                        var result = new TreeTableContent(
                                             null,
                                             referenceObject.Rows,
                                             referenceObject.ShouldScrollVertical,
                                             referenceObject.ShouldScrollHorizontal,
                                             referenceObject.ShouldSyncHeaderScroll,
                                             referenceObject.ShouldSyncFooterScroll,
                                             referenceObject.ShouldIncludeFooter,
                                             referenceObject.ShouldFreezeFirstColumn,
                                             referenceObject.DeadAreaColor,
                                             referenceObject.MaxRows,
                                             referenceObject.CssStyle);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "headers", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<TreeTableContent>
                {
                    Name = "constructor should throw ArgumentException when parameter 'headers' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<TreeTableContent>();

                        var result = new TreeTableContent(
                                             new List<TreeTableHeaderRow>(),
                                             referenceObject.Rows,
                                             referenceObject.ShouldScrollVertical,
                                             referenceObject.ShouldScrollHorizontal,
                                             referenceObject.ShouldSyncHeaderScroll,
                                             referenceObject.ShouldSyncFooterScroll,
                                             referenceObject.ShouldIncludeFooter,
                                             referenceObject.ShouldFreezeFirstColumn,
                                             referenceObject.DeadAreaColor,
                                             referenceObject.MaxRows,
                                             referenceObject.CssStyle);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "headers", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<TreeTableContent>
                {
                    Name = "constructor should throw ArgumentException when parameter 'headers' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<TreeTableContent>();

                        var result = new TreeTableContent(
                                             new TreeTableHeaderRow[0].Concat(referenceObject.Headers).Concat(new TreeTableHeaderRow[] { null }).Concat(referenceObject.Headers).ToList(),
                                             referenceObject.Rows,
                                             referenceObject.ShouldScrollVertical,
                                             referenceObject.ShouldScrollHorizontal,
                                             referenceObject.ShouldSyncHeaderScroll,
                                             referenceObject.ShouldSyncFooterScroll,
                                             referenceObject.ShouldIncludeFooter,
                                             referenceObject.ShouldFreezeFirstColumn,
                                             referenceObject.DeadAreaColor,
                                             referenceObject.MaxRows,
                                             referenceObject.CssStyle);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "headers", "contains at least one null element", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<TreeTableContent>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'rows' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<TreeTableContent>();

                        var result = new TreeTableContent(
                                             referenceObject.Headers,
                                             null,
                                             referenceObject.ShouldScrollVertical,
                                             referenceObject.ShouldScrollHorizontal,
                                             referenceObject.ShouldSyncHeaderScroll,
                                             referenceObject.ShouldSyncFooterScroll,
                                             referenceObject.ShouldIncludeFooter,
                                             referenceObject.ShouldFreezeFirstColumn,
                                             referenceObject.DeadAreaColor,
                                             referenceObject.MaxRows,
                                             referenceObject.CssStyle);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "rows", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<TreeTableContent>
                {
                    Name = "constructor should throw ArgumentException when parameter 'rows' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<TreeTableContent>();

                        var result = new TreeTableContent(
                                             referenceObject.Headers,
                                             new List<TreeTableRow>(),
                                             referenceObject.ShouldScrollVertical,
                                             referenceObject.ShouldScrollHorizontal,
                                             referenceObject.ShouldSyncHeaderScroll,
                                             referenceObject.ShouldSyncFooterScroll,
                                             referenceObject.ShouldIncludeFooter,
                                             referenceObject.ShouldFreezeFirstColumn,
                                             referenceObject.DeadAreaColor,
                                             referenceObject.MaxRows,
                                             referenceObject.CssStyle);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "rows", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<TreeTableContent>
                {
                    Name = "constructor should throw ArgumentException when parameter 'rows' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<TreeTableContent>();

                        var result = new TreeTableContent(
                                             referenceObject.Headers,
                                             new TreeTableRow[0].Concat(referenceObject.Rows).Concat(new TreeTableRow[] { null }).Concat(referenceObject.Rows).ToList(),
                                             referenceObject.ShouldScrollVertical,
                                             referenceObject.ShouldScrollHorizontal,
                                             referenceObject.ShouldSyncHeaderScroll,
                                             referenceObject.ShouldSyncFooterScroll,
                                             referenceObject.ShouldIncludeFooter,
                                             referenceObject.ShouldFreezeFirstColumn,
                                             referenceObject.DeadAreaColor,
                                             referenceObject.MaxRows,
                                             referenceObject.CssStyle);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "rows", "contains at least one null element", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<TreeTableContent>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'deadAreaColor' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<TreeTableContent>();

                        var result = new TreeTableContent(
                                             referenceObject.Headers,
                                             referenceObject.Rows,
                                             referenceObject.ShouldScrollVertical,
                                             referenceObject.ShouldScrollHorizontal,
                                             referenceObject.ShouldSyncHeaderScroll,
                                             referenceObject.ShouldSyncFooterScroll,
                                             referenceObject.ShouldIncludeFooter,
                                             referenceObject.ShouldFreezeFirstColumn,
                                             null,
                                             referenceObject.MaxRows,
                                             referenceObject.CssStyle);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "deadAreaColor", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<TreeTableContent>
                {
                    Name = "constructor should throw ArgumentException when parameter 'deadAreaColor' is white space scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<TreeTableContent>();

                        var result = new TreeTableContent(
                                             referenceObject.Headers,
                                             referenceObject.Rows,
                                             referenceObject.ShouldScrollVertical,
                                             referenceObject.ShouldScrollHorizontal,
                                             referenceObject.ShouldSyncHeaderScroll,
                                             referenceObject.ShouldSyncFooterScroll,
                                             referenceObject.ShouldIncludeFooter,
                                             referenceObject.ShouldFreezeFirstColumn,
                                             Invariant($"  {Environment.NewLine}  "),
                                             referenceObject.MaxRows,
                                             referenceObject.CssStyle);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "deadAreaColor", "white space", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<TreeTableContent>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'cssStyle' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<TreeTableContent>();

                        var result = new TreeTableContent(
                                             referenceObject.Headers,
                                             referenceObject.Rows,
                                             referenceObject.ShouldScrollVertical,
                                             referenceObject.ShouldScrollHorizontal,
                                             referenceObject.ShouldSyncHeaderScroll,
                                             referenceObject.ShouldSyncFooterScroll,
                                             referenceObject.ShouldIncludeFooter,
                                             referenceObject.ShouldFreezeFirstColumn,
                                             referenceObject.DeadAreaColor,
                                             referenceObject.MaxRows,
                                             null);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "cssStyle", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<TreeTableContent>
                {
                    Name = "constructor should throw ArgumentException when parameter 'cssStyle' is white space scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<TreeTableContent>();

                        var result = new TreeTableContent(
                                             referenceObject.Headers,
                                             referenceObject.Rows,
                                             referenceObject.ShouldScrollVertical,
                                             referenceObject.ShouldScrollHorizontal,
                                             referenceObject.ShouldSyncHeaderScroll,
                                             referenceObject.ShouldSyncFooterScroll,
                                             referenceObject.ShouldIncludeFooter,
                                             referenceObject.ShouldFreezeFirstColumn,
                                             referenceObject.DeadAreaColor,
                                             referenceObject.MaxRows,
                                             Invariant($"  {Environment.NewLine}  "));

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "cssStyle", "white space", },
                });

        private static readonly ConstructorPropertyAssignmentTestScenarios<TreeTableContent> ConstructorPropertyAssignmentTestScenarios = new ConstructorPropertyAssignmentTestScenarios<TreeTableContent>()
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<TreeTableContent>
                {
                    Name = "Headers should return same 'headers' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<TreeTableContent>();

                        var result = new SystemUnderTestExpectedPropertyValue<TreeTableContent>
                        {
                            SystemUnderTest = new TreeTableContent(
                                                      referenceObject.Headers,
                                                      referenceObject.Rows,
                                                      referenceObject.ShouldScrollVertical,
                                                      referenceObject.ShouldScrollHorizontal,
                                                      referenceObject.ShouldSyncHeaderScroll,
                                                      referenceObject.ShouldSyncFooterScroll,
                                                      referenceObject.ShouldIncludeFooter,
                                                      referenceObject.ShouldFreezeFirstColumn,
                                                      referenceObject.DeadAreaColor,
                                                      referenceObject.MaxRows,
                                                      referenceObject.CssStyle),
                            ExpectedPropertyValue = referenceObject.Headers,
                        };

                        return result;
                    },
                    PropertyName = "Headers",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<TreeTableContent>
                {
                    Name = "Rows should return same 'rows' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<TreeTableContent>();

                        var result = new SystemUnderTestExpectedPropertyValue<TreeTableContent>
                        {
                            SystemUnderTest = new TreeTableContent(
                                                      referenceObject.Headers,
                                                      referenceObject.Rows,
                                                      referenceObject.ShouldScrollVertical,
                                                      referenceObject.ShouldScrollHorizontal,
                                                      referenceObject.ShouldSyncHeaderScroll,
                                                      referenceObject.ShouldSyncFooterScroll,
                                                      referenceObject.ShouldIncludeFooter,
                                                      referenceObject.ShouldFreezeFirstColumn,
                                                      referenceObject.DeadAreaColor,
                                                      referenceObject.MaxRows,
                                                      referenceObject.CssStyle),
                            ExpectedPropertyValue = referenceObject.Rows,
                        };

                        return result;
                    },
                    PropertyName = "Rows",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<TreeTableContent>
                {
                    Name = "ShouldScrollVertical should return same 'shouldScrollVertical' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<TreeTableContent>();

                        var result = new SystemUnderTestExpectedPropertyValue<TreeTableContent>
                        {
                            SystemUnderTest = new TreeTableContent(
                                                      referenceObject.Headers,
                                                      referenceObject.Rows,
                                                      referenceObject.ShouldScrollVertical,
                                                      referenceObject.ShouldScrollHorizontal,
                                                      referenceObject.ShouldSyncHeaderScroll,
                                                      referenceObject.ShouldSyncFooterScroll,
                                                      referenceObject.ShouldIncludeFooter,
                                                      referenceObject.ShouldFreezeFirstColumn,
                                                      referenceObject.DeadAreaColor,
                                                      referenceObject.MaxRows,
                                                      referenceObject.CssStyle),
                            ExpectedPropertyValue = referenceObject.ShouldScrollVertical,
                        };

                        return result;
                    },
                    PropertyName = "ShouldScrollVertical",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<TreeTableContent>
                {
                    Name = "ShouldScrollHorizontal should return same 'shouldScrollHorizontal' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<TreeTableContent>();

                        var result = new SystemUnderTestExpectedPropertyValue<TreeTableContent>
                        {
                            SystemUnderTest = new TreeTableContent(
                                                      referenceObject.Headers,
                                                      referenceObject.Rows,
                                                      referenceObject.ShouldScrollVertical,
                                                      referenceObject.ShouldScrollHorizontal,
                                                      referenceObject.ShouldSyncHeaderScroll,
                                                      referenceObject.ShouldSyncFooterScroll,
                                                      referenceObject.ShouldIncludeFooter,
                                                      referenceObject.ShouldFreezeFirstColumn,
                                                      referenceObject.DeadAreaColor,
                                                      referenceObject.MaxRows,
                                                      referenceObject.CssStyle),
                            ExpectedPropertyValue = referenceObject.ShouldScrollHorizontal,
                        };

                        return result;
                    },
                    PropertyName = "ShouldScrollHorizontal",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<TreeTableContent>
                {
                    Name = "ShouldSyncHeaderScroll should return same 'shouldSyncHeaderScroll' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<TreeTableContent>();

                        var result = new SystemUnderTestExpectedPropertyValue<TreeTableContent>
                        {
                            SystemUnderTest = new TreeTableContent(
                                                      referenceObject.Headers,
                                                      referenceObject.Rows,
                                                      referenceObject.ShouldScrollVertical,
                                                      referenceObject.ShouldScrollHorizontal,
                                                      referenceObject.ShouldSyncHeaderScroll,
                                                      referenceObject.ShouldSyncFooterScroll,
                                                      referenceObject.ShouldIncludeFooter,
                                                      referenceObject.ShouldFreezeFirstColumn,
                                                      referenceObject.DeadAreaColor,
                                                      referenceObject.MaxRows,
                                                      referenceObject.CssStyle),
                            ExpectedPropertyValue = referenceObject.ShouldSyncHeaderScroll,
                        };

                        return result;
                    },
                    PropertyName = "ShouldSyncHeaderScroll",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<TreeTableContent>
                {
                    Name = "ShouldSyncFooterScroll should return same 'shouldSyncFooterScroll' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<TreeTableContent>();

                        var result = new SystemUnderTestExpectedPropertyValue<TreeTableContent>
                        {
                            SystemUnderTest = new TreeTableContent(
                                                      referenceObject.Headers,
                                                      referenceObject.Rows,
                                                      referenceObject.ShouldScrollVertical,
                                                      referenceObject.ShouldScrollHorizontal,
                                                      referenceObject.ShouldSyncHeaderScroll,
                                                      referenceObject.ShouldSyncFooterScroll,
                                                      referenceObject.ShouldIncludeFooter,
                                                      referenceObject.ShouldFreezeFirstColumn,
                                                      referenceObject.DeadAreaColor,
                                                      referenceObject.MaxRows,
                                                      referenceObject.CssStyle),
                            ExpectedPropertyValue = referenceObject.ShouldSyncFooterScroll,
                        };

                        return result;
                    },
                    PropertyName = "ShouldSyncFooterScroll",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<TreeTableContent>
                {
                    Name = "ShouldIncludeFooter should return same 'shouldIncludeFooter' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<TreeTableContent>();

                        var result = new SystemUnderTestExpectedPropertyValue<TreeTableContent>
                        {
                            SystemUnderTest = new TreeTableContent(
                                                      referenceObject.Headers,
                                                      referenceObject.Rows,
                                                      referenceObject.ShouldScrollVertical,
                                                      referenceObject.ShouldScrollHorizontal,
                                                      referenceObject.ShouldSyncHeaderScroll,
                                                      referenceObject.ShouldSyncFooterScroll,
                                                      referenceObject.ShouldIncludeFooter,
                                                      referenceObject.ShouldFreezeFirstColumn,
                                                      referenceObject.DeadAreaColor,
                                                      referenceObject.MaxRows,
                                                      referenceObject.CssStyle),
                            ExpectedPropertyValue = referenceObject.ShouldIncludeFooter,
                        };

                        return result;
                    },
                    PropertyName = "ShouldIncludeFooter",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<TreeTableContent>
                {
                    Name = "ShouldFreezeFirstColumn should return same 'shouldFreezeFirstColumn' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<TreeTableContent>();

                        var result = new SystemUnderTestExpectedPropertyValue<TreeTableContent>
                        {
                            SystemUnderTest = new TreeTableContent(
                                                      referenceObject.Headers,
                                                      referenceObject.Rows,
                                                      referenceObject.ShouldScrollVertical,
                                                      referenceObject.ShouldScrollHorizontal,
                                                      referenceObject.ShouldSyncHeaderScroll,
                                                      referenceObject.ShouldSyncFooterScroll,
                                                      referenceObject.ShouldIncludeFooter,
                                                      referenceObject.ShouldFreezeFirstColumn,
                                                      referenceObject.DeadAreaColor,
                                                      referenceObject.MaxRows,
                                                      referenceObject.CssStyle),
                            ExpectedPropertyValue = referenceObject.ShouldFreezeFirstColumn,
                        };

                        return result;
                    },
                    PropertyName = "ShouldFreezeFirstColumn",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<TreeTableContent>
                {
                    Name = "DeadAreaColor should return same 'deadAreaColor' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<TreeTableContent>();

                        var result = new SystemUnderTestExpectedPropertyValue<TreeTableContent>
                        {
                            SystemUnderTest = new TreeTableContent(
                                                      referenceObject.Headers,
                                                      referenceObject.Rows,
                                                      referenceObject.ShouldScrollVertical,
                                                      referenceObject.ShouldScrollHorizontal,
                                                      referenceObject.ShouldSyncHeaderScroll,
                                                      referenceObject.ShouldSyncFooterScroll,
                                                      referenceObject.ShouldIncludeFooter,
                                                      referenceObject.ShouldFreezeFirstColumn,
                                                      referenceObject.DeadAreaColor,
                                                      referenceObject.MaxRows,
                                                      referenceObject.CssStyle),
                            ExpectedPropertyValue = referenceObject.DeadAreaColor,
                        };

                        return result;
                    },
                    PropertyName = "DeadAreaColor",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<TreeTableContent>
                {
                    Name = "MaxRows should return same 'maxRows' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<TreeTableContent>();

                        var result = new SystemUnderTestExpectedPropertyValue<TreeTableContent>
                        {
                            SystemUnderTest = new TreeTableContent(
                                                      referenceObject.Headers,
                                                      referenceObject.Rows,
                                                      referenceObject.ShouldScrollVertical,
                                                      referenceObject.ShouldScrollHorizontal,
                                                      referenceObject.ShouldSyncHeaderScroll,
                                                      referenceObject.ShouldSyncFooterScroll,
                                                      referenceObject.ShouldIncludeFooter,
                                                      referenceObject.ShouldFreezeFirstColumn,
                                                      referenceObject.DeadAreaColor,
                                                      referenceObject.MaxRows,
                                                      referenceObject.CssStyle),
                            ExpectedPropertyValue = referenceObject.MaxRows,
                        };

                        return result;
                    },
                    PropertyName = "MaxRows",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<TreeTableContent>
                {
                    Name = "CssStyle should return same 'cssStyle' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<TreeTableContent>();

                        var result = new SystemUnderTestExpectedPropertyValue<TreeTableContent>
                        {
                            SystemUnderTest = new TreeTableContent(
                                                      referenceObject.Headers,
                                                      referenceObject.Rows,
                                                      referenceObject.ShouldScrollVertical,
                                                      referenceObject.ShouldScrollHorizontal,
                                                      referenceObject.ShouldSyncHeaderScroll,
                                                      referenceObject.ShouldSyncFooterScroll,
                                                      referenceObject.ShouldIncludeFooter,
                                                      referenceObject.ShouldFreezeFirstColumn,
                                                      referenceObject.DeadAreaColor,
                                                      referenceObject.MaxRows,
                                                      referenceObject.CssStyle),
                            ExpectedPropertyValue = referenceObject.CssStyle,
                        };

                        return result;
                    },
                    PropertyName = "CssStyle",
                });

        private static readonly DeepCloneWithTestScenarios<TreeTableContent> DeepCloneWithTestScenarios = new DeepCloneWithTestScenarios<TreeTableContent>()
            .AddScenario(() =>
                new DeepCloneWithTestScenario<TreeTableContent>
                {
                    Name = "DeepCloneWithHeaders should deep clone object and replace Headers with the provided headers",
                    WithPropertyName = "Headers",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<TreeTableContent>();

                        var referenceObject = A.Dummy<TreeTableContent>().ThatIs(_ => !systemUnderTest.Headers.IsEqualTo(_.Headers));

                        var result = new SystemUnderTestDeepCloneWithValue<TreeTableContent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Headers,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<TreeTableContent>
                {
                    Name = "DeepCloneWithRows should deep clone object and replace Rows with the provided rows",
                    WithPropertyName = "Rows",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<TreeTableContent>();

                        var referenceObject = A.Dummy<TreeTableContent>().ThatIs(_ => !systemUnderTest.Rows.IsEqualTo(_.Rows));

                        var result = new SystemUnderTestDeepCloneWithValue<TreeTableContent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Rows,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<TreeTableContent>
                {
                    Name = "DeepCloneWithShouldScrollVertical should deep clone object and replace ShouldScrollVertical with the provided shouldScrollVertical",
                    WithPropertyName = "ShouldScrollVertical",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<TreeTableContent>();

                        var referenceObject = A.Dummy<TreeTableContent>().ThatIs(_ => !systemUnderTest.ShouldScrollVertical.IsEqualTo(_.ShouldScrollVertical));

                        var result = new SystemUnderTestDeepCloneWithValue<TreeTableContent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ShouldScrollVertical,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<TreeTableContent>
                {
                    Name = "DeepCloneWithShouldScrollHorizontal should deep clone object and replace ShouldScrollHorizontal with the provided shouldScrollHorizontal",
                    WithPropertyName = "ShouldScrollHorizontal",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<TreeTableContent>();

                        var referenceObject = A.Dummy<TreeTableContent>().ThatIs(_ => !systemUnderTest.ShouldScrollHorizontal.IsEqualTo(_.ShouldScrollHorizontal));

                        var result = new SystemUnderTestDeepCloneWithValue<TreeTableContent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ShouldScrollHorizontal,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<TreeTableContent>
                {
                    Name = "DeepCloneWithShouldSyncHeaderScroll should deep clone object and replace ShouldSyncHeaderScroll with the provided shouldSyncHeaderScroll",
                    WithPropertyName = "ShouldSyncHeaderScroll",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<TreeTableContent>();

                        var referenceObject = A.Dummy<TreeTableContent>().ThatIs(_ => !systemUnderTest.ShouldSyncHeaderScroll.IsEqualTo(_.ShouldSyncHeaderScroll));

                        var result = new SystemUnderTestDeepCloneWithValue<TreeTableContent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ShouldSyncHeaderScroll,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<TreeTableContent>
                {
                    Name = "DeepCloneWithShouldSyncFooterScroll should deep clone object and replace ShouldSyncFooterScroll with the provided shouldSyncFooterScroll",
                    WithPropertyName = "ShouldSyncFooterScroll",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<TreeTableContent>();

                        var referenceObject = A.Dummy<TreeTableContent>().ThatIs(_ => !systemUnderTest.ShouldSyncFooterScroll.IsEqualTo(_.ShouldSyncFooterScroll));

                        var result = new SystemUnderTestDeepCloneWithValue<TreeTableContent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ShouldSyncFooterScroll,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<TreeTableContent>
                {
                    Name = "DeepCloneWithShouldIncludeFooter should deep clone object and replace ShouldIncludeFooter with the provided shouldIncludeFooter",
                    WithPropertyName = "ShouldIncludeFooter",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<TreeTableContent>();

                        var referenceObject = A.Dummy<TreeTableContent>().ThatIs(_ => !systemUnderTest.ShouldIncludeFooter.IsEqualTo(_.ShouldIncludeFooter));

                        var result = new SystemUnderTestDeepCloneWithValue<TreeTableContent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ShouldIncludeFooter,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<TreeTableContent>
                {
                    Name = "DeepCloneWithShouldFreezeFirstColumn should deep clone object and replace ShouldFreezeFirstColumn with the provided shouldFreezeFirstColumn",
                    WithPropertyName = "ShouldFreezeFirstColumn",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<TreeTableContent>();

                        var referenceObject = A.Dummy<TreeTableContent>().ThatIs(_ => !systemUnderTest.ShouldFreezeFirstColumn.IsEqualTo(_.ShouldFreezeFirstColumn));

                        var result = new SystemUnderTestDeepCloneWithValue<TreeTableContent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ShouldFreezeFirstColumn,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<TreeTableContent>
                {
                    Name = "DeepCloneWithDeadAreaColor should deep clone object and replace DeadAreaColor with the provided deadAreaColor",
                    WithPropertyName = "DeadAreaColor",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<TreeTableContent>();

                        var referenceObject = A.Dummy<TreeTableContent>().ThatIs(_ => !systemUnderTest.DeadAreaColor.IsEqualTo(_.DeadAreaColor));

                        var result = new SystemUnderTestDeepCloneWithValue<TreeTableContent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.DeadAreaColor,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<TreeTableContent>
                {
                    Name = "DeepCloneWithMaxRows should deep clone object and replace MaxRows with the provided maxRows",
                    WithPropertyName = "MaxRows",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<TreeTableContent>();

                        var referenceObject = A.Dummy<TreeTableContent>().ThatIs(_ => !systemUnderTest.MaxRows.IsEqualTo(_.MaxRows));

                        var result = new SystemUnderTestDeepCloneWithValue<TreeTableContent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.MaxRows,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<TreeTableContent>
                {
                    Name = "DeepCloneWithCssStyle should deep clone object and replace CssStyle with the provided cssStyle",
                    WithPropertyName = "CssStyle",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<TreeTableContent>();

                        var referenceObject = A.Dummy<TreeTableContent>().ThatIs(_ => !systemUnderTest.CssStyle.IsEqualTo(_.CssStyle));

                        var result = new SystemUnderTestDeepCloneWithValue<TreeTableContent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.CssStyle,
                        };

                        return result;
                    },
                });

        private static readonly TreeTableContent ReferenceObjectForEquatableTestScenarios = A.Dummy<TreeTableContent>();

        private static readonly EquatableTestScenarios<TreeTableContent> EquatableTestScenarios = new EquatableTestScenarios<TreeTableContent>()
            .AddScenario(() =>
                new EquatableTestScenario<TreeTableContent>
                {
                    Name = "Default Code Generated Scenario",
                    ReferenceObject = ReferenceObjectForEquatableTestScenarios,
                    ObjectsThatAreEqualToButNotTheSameAsReferenceObject = new TreeTableContent[]
                    {
                        new TreeTableContent(
                                ReferenceObjectForEquatableTestScenarios.Headers,
                                ReferenceObjectForEquatableTestScenarios.Rows,
                                ReferenceObjectForEquatableTestScenarios.ShouldScrollVertical,
                                ReferenceObjectForEquatableTestScenarios.ShouldScrollHorizontal,
                                ReferenceObjectForEquatableTestScenarios.ShouldSyncHeaderScroll,
                                ReferenceObjectForEquatableTestScenarios.ShouldSyncFooterScroll,
                                ReferenceObjectForEquatableTestScenarios.ShouldIncludeFooter,
                                ReferenceObjectForEquatableTestScenarios.ShouldFreezeFirstColumn,
                                ReferenceObjectForEquatableTestScenarios.DeadAreaColor,
                                ReferenceObjectForEquatableTestScenarios.MaxRows,
                                ReferenceObjectForEquatableTestScenarios.CssStyle),
                    },
                    ObjectsThatAreNotEqualToReferenceObject = new TreeTableContent[]
                    {
                        new TreeTableContent(
                                A.Dummy<TreeTableContent>().Whose(_ => !_.Headers.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Headers)).Headers,
                                ReferenceObjectForEquatableTestScenarios.Rows,
                                ReferenceObjectForEquatableTestScenarios.ShouldScrollVertical,
                                ReferenceObjectForEquatableTestScenarios.ShouldScrollHorizontal,
                                ReferenceObjectForEquatableTestScenarios.ShouldSyncHeaderScroll,
                                ReferenceObjectForEquatableTestScenarios.ShouldSyncFooterScroll,
                                ReferenceObjectForEquatableTestScenarios.ShouldIncludeFooter,
                                ReferenceObjectForEquatableTestScenarios.ShouldFreezeFirstColumn,
                                ReferenceObjectForEquatableTestScenarios.DeadAreaColor,
                                ReferenceObjectForEquatableTestScenarios.MaxRows,
                                ReferenceObjectForEquatableTestScenarios.CssStyle),
                        new TreeTableContent(
                                ReferenceObjectForEquatableTestScenarios.Headers,
                                A.Dummy<TreeTableContent>().Whose(_ => !_.Rows.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Rows)).Rows,
                                ReferenceObjectForEquatableTestScenarios.ShouldScrollVertical,
                                ReferenceObjectForEquatableTestScenarios.ShouldScrollHorizontal,
                                ReferenceObjectForEquatableTestScenarios.ShouldSyncHeaderScroll,
                                ReferenceObjectForEquatableTestScenarios.ShouldSyncFooterScroll,
                                ReferenceObjectForEquatableTestScenarios.ShouldIncludeFooter,
                                ReferenceObjectForEquatableTestScenarios.ShouldFreezeFirstColumn,
                                ReferenceObjectForEquatableTestScenarios.DeadAreaColor,
                                ReferenceObjectForEquatableTestScenarios.MaxRows,
                                ReferenceObjectForEquatableTestScenarios.CssStyle),
                        new TreeTableContent(
                                ReferenceObjectForEquatableTestScenarios.Headers,
                                ReferenceObjectForEquatableTestScenarios.Rows,
                                A.Dummy<TreeTableContent>().Whose(_ => !_.ShouldScrollVertical.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ShouldScrollVertical)).ShouldScrollVertical,
                                ReferenceObjectForEquatableTestScenarios.ShouldScrollHorizontal,
                                ReferenceObjectForEquatableTestScenarios.ShouldSyncHeaderScroll,
                                ReferenceObjectForEquatableTestScenarios.ShouldSyncFooterScroll,
                                ReferenceObjectForEquatableTestScenarios.ShouldIncludeFooter,
                                ReferenceObjectForEquatableTestScenarios.ShouldFreezeFirstColumn,
                                ReferenceObjectForEquatableTestScenarios.DeadAreaColor,
                                ReferenceObjectForEquatableTestScenarios.MaxRows,
                                ReferenceObjectForEquatableTestScenarios.CssStyle),
                        new TreeTableContent(
                                ReferenceObjectForEquatableTestScenarios.Headers,
                                ReferenceObjectForEquatableTestScenarios.Rows,
                                ReferenceObjectForEquatableTestScenarios.ShouldScrollVertical,
                                A.Dummy<TreeTableContent>().Whose(_ => !_.ShouldScrollHorizontal.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ShouldScrollHorizontal)).ShouldScrollHorizontal,
                                ReferenceObjectForEquatableTestScenarios.ShouldSyncHeaderScroll,
                                ReferenceObjectForEquatableTestScenarios.ShouldSyncFooterScroll,
                                ReferenceObjectForEquatableTestScenarios.ShouldIncludeFooter,
                                ReferenceObjectForEquatableTestScenarios.ShouldFreezeFirstColumn,
                                ReferenceObjectForEquatableTestScenarios.DeadAreaColor,
                                ReferenceObjectForEquatableTestScenarios.MaxRows,
                                ReferenceObjectForEquatableTestScenarios.CssStyle),
                        new TreeTableContent(
                                ReferenceObjectForEquatableTestScenarios.Headers,
                                ReferenceObjectForEquatableTestScenarios.Rows,
                                ReferenceObjectForEquatableTestScenarios.ShouldScrollVertical,
                                ReferenceObjectForEquatableTestScenarios.ShouldScrollHorizontal,
                                A.Dummy<TreeTableContent>().Whose(_ => !_.ShouldSyncHeaderScroll.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ShouldSyncHeaderScroll)).ShouldSyncHeaderScroll,
                                ReferenceObjectForEquatableTestScenarios.ShouldSyncFooterScroll,
                                ReferenceObjectForEquatableTestScenarios.ShouldIncludeFooter,
                                ReferenceObjectForEquatableTestScenarios.ShouldFreezeFirstColumn,
                                ReferenceObjectForEquatableTestScenarios.DeadAreaColor,
                                ReferenceObjectForEquatableTestScenarios.MaxRows,
                                ReferenceObjectForEquatableTestScenarios.CssStyle),
                        new TreeTableContent(
                                ReferenceObjectForEquatableTestScenarios.Headers,
                                ReferenceObjectForEquatableTestScenarios.Rows,
                                ReferenceObjectForEquatableTestScenarios.ShouldScrollVertical,
                                ReferenceObjectForEquatableTestScenarios.ShouldScrollHorizontal,
                                ReferenceObjectForEquatableTestScenarios.ShouldSyncHeaderScroll,
                                A.Dummy<TreeTableContent>().Whose(_ => !_.ShouldSyncFooterScroll.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ShouldSyncFooterScroll)).ShouldSyncFooterScroll,
                                ReferenceObjectForEquatableTestScenarios.ShouldIncludeFooter,
                                ReferenceObjectForEquatableTestScenarios.ShouldFreezeFirstColumn,
                                ReferenceObjectForEquatableTestScenarios.DeadAreaColor,
                                ReferenceObjectForEquatableTestScenarios.MaxRows,
                                ReferenceObjectForEquatableTestScenarios.CssStyle),
                        new TreeTableContent(
                                ReferenceObjectForEquatableTestScenarios.Headers,
                                ReferenceObjectForEquatableTestScenarios.Rows,
                                ReferenceObjectForEquatableTestScenarios.ShouldScrollVertical,
                                ReferenceObjectForEquatableTestScenarios.ShouldScrollHorizontal,
                                ReferenceObjectForEquatableTestScenarios.ShouldSyncHeaderScroll,
                                ReferenceObjectForEquatableTestScenarios.ShouldSyncFooterScroll,
                                A.Dummy<TreeTableContent>().Whose(_ => !_.ShouldIncludeFooter.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ShouldIncludeFooter)).ShouldIncludeFooter,
                                ReferenceObjectForEquatableTestScenarios.ShouldFreezeFirstColumn,
                                ReferenceObjectForEquatableTestScenarios.DeadAreaColor,
                                ReferenceObjectForEquatableTestScenarios.MaxRows,
                                ReferenceObjectForEquatableTestScenarios.CssStyle),
                        new TreeTableContent(
                                ReferenceObjectForEquatableTestScenarios.Headers,
                                ReferenceObjectForEquatableTestScenarios.Rows,
                                ReferenceObjectForEquatableTestScenarios.ShouldScrollVertical,
                                ReferenceObjectForEquatableTestScenarios.ShouldScrollHorizontal,
                                ReferenceObjectForEquatableTestScenarios.ShouldSyncHeaderScroll,
                                ReferenceObjectForEquatableTestScenarios.ShouldSyncFooterScroll,
                                ReferenceObjectForEquatableTestScenarios.ShouldIncludeFooter,
                                A.Dummy<TreeTableContent>().Whose(_ => !_.ShouldFreezeFirstColumn.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ShouldFreezeFirstColumn)).ShouldFreezeFirstColumn,
                                ReferenceObjectForEquatableTestScenarios.DeadAreaColor,
                                ReferenceObjectForEquatableTestScenarios.MaxRows,
                                ReferenceObjectForEquatableTestScenarios.CssStyle),
                        new TreeTableContent(
                                ReferenceObjectForEquatableTestScenarios.Headers,
                                ReferenceObjectForEquatableTestScenarios.Rows,
                                ReferenceObjectForEquatableTestScenarios.ShouldScrollVertical,
                                ReferenceObjectForEquatableTestScenarios.ShouldScrollHorizontal,
                                ReferenceObjectForEquatableTestScenarios.ShouldSyncHeaderScroll,
                                ReferenceObjectForEquatableTestScenarios.ShouldSyncFooterScroll,
                                ReferenceObjectForEquatableTestScenarios.ShouldIncludeFooter,
                                ReferenceObjectForEquatableTestScenarios.ShouldFreezeFirstColumn,
                                A.Dummy<TreeTableContent>().Whose(_ => !_.DeadAreaColor.IsEqualTo(ReferenceObjectForEquatableTestScenarios.DeadAreaColor)).DeadAreaColor,
                                ReferenceObjectForEquatableTestScenarios.MaxRows,
                                ReferenceObjectForEquatableTestScenarios.CssStyle),
                        new TreeTableContent(
                                ReferenceObjectForEquatableTestScenarios.Headers,
                                ReferenceObjectForEquatableTestScenarios.Rows,
                                ReferenceObjectForEquatableTestScenarios.ShouldScrollVertical,
                                ReferenceObjectForEquatableTestScenarios.ShouldScrollHorizontal,
                                ReferenceObjectForEquatableTestScenarios.ShouldSyncHeaderScroll,
                                ReferenceObjectForEquatableTestScenarios.ShouldSyncFooterScroll,
                                ReferenceObjectForEquatableTestScenarios.ShouldIncludeFooter,
                                ReferenceObjectForEquatableTestScenarios.ShouldFreezeFirstColumn,
                                ReferenceObjectForEquatableTestScenarios.DeadAreaColor,
                                A.Dummy<TreeTableContent>().Whose(_ => !_.MaxRows.IsEqualTo(ReferenceObjectForEquatableTestScenarios.MaxRows)).MaxRows,
                                ReferenceObjectForEquatableTestScenarios.CssStyle),
                        new TreeTableContent(
                                ReferenceObjectForEquatableTestScenarios.Headers,
                                ReferenceObjectForEquatableTestScenarios.Rows,
                                ReferenceObjectForEquatableTestScenarios.ShouldScrollVertical,
                                ReferenceObjectForEquatableTestScenarios.ShouldScrollHorizontal,
                                ReferenceObjectForEquatableTestScenarios.ShouldSyncHeaderScroll,
                                ReferenceObjectForEquatableTestScenarios.ShouldSyncFooterScroll,
                                ReferenceObjectForEquatableTestScenarios.ShouldIncludeFooter,
                                ReferenceObjectForEquatableTestScenarios.ShouldFreezeFirstColumn,
                                ReferenceObjectForEquatableTestScenarios.DeadAreaColor,
                                ReferenceObjectForEquatableTestScenarios.MaxRows,
                                A.Dummy<TreeTableContent>().Whose(_ => !_.CssStyle.IsEqualTo(ReferenceObjectForEquatableTestScenarios.CssStyle)).CssStyle),
                    },
                    ObjectsThatAreNotOfTheSameTypeAsReferenceObject = new object[]
                    {
                        A.Dummy<object>(),
                        A.Dummy<string>(),
                        A.Dummy<int>(),
                        A.Dummy<int?>(),
                        A.Dummy<Guid>(),
                    },
                });

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Structural
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void TreeTableContent___Should_implement_IModel_of_TreeTableContent___When_reflecting()
            {
                // Arrange
                var type = typeof(TreeTableContent);

                var expectedModelMethods = typeof(IModel<TreeTableContent>).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethodsFiltered(MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IModel<TreeTableContent>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void TreeTableContent___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(TreeTableContent);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class StringRepresentation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ToString___Should_generate_friendly_string_representation_of_object___When_called()
            {
                var scenarios = StringRepresentationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.ToString();

                    // Assert
                    actual.AsTest().Must().BeEqualTo(scenario.ExpectedStringRepresentation, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Constructing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Constructor___Should_throw___When_parameters_are_not_valid()
            {
                var scenarios = ConstructorArgumentValidationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = Record.Exception(scenario.ConstructionFunc);

                    // Assert
                    actual.AsTest().Must().BeOfType(scenario.ExpectedExceptionType, because: scenario.Id);

                    foreach(var expected in scenario.ExpectedExceptionMessageContains ?? new List<string>())
                    {
                        actual.Message.AsTest().Must().ContainString(expected, because: scenario.Id);
                    }

                    if (scenario.ExpectedExceptionMessageEquals != null)
                    {
                        actual.Message.AsTest().Must().BeEqualTo(scenario.ExpectedExceptionMessageEquals, because: scenario.Id);
                    }
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            [SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals", MessageId = "referenceObject")]
            public static void Properties___Should_be_assigned_by_constructor_to_expected_value___When_getting()
            {
                var scenarios = ConstructorPropertyAssignmentTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if ((scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.NoPropertiesAssignedInConstructorScenarioPropertyName) || (scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioPropertyName))
                    {
                        continue;
                    }

                    // Act
                    var actual = scenario.Property.GetValue(scenario.SystemUnderTest);

                    // Assert
                    // When the scenario specifies CompareActualToExpectedUsing.DefaultStrategy, ValidateAndPrepareForTesting()
                    // will check if ExpectedPropertyValue == null.  If so, it sets CompareActualToExpectedUsing = ReferenceEquality.
                    // If not, then it checks the runtime type of ExpectedPropertyValue and if it's a value type,
                    // then it sets CompareActualToExpectedUsing = ValueEquality, otherwise it uses ValueEquality.
                    // So a boxed value type is handled properly (using ValueEquality instead of ReferenceEquality).
                    if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ValueEquality)
                    {
                        actual.AsTest().Must().BeEqualTo(scenario.ExpectedPropertyValue, because: scenario.Id);
                    }
                    else if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ReferenceEquality)
                    {
                        actual.AsTest().Must().BeSameReferenceAs(scenario.ExpectedPropertyValue, because: scenario.Id);
                    }
                    else
                    {
                        throw new NotSupportedException("This CompareActualToExpectedUsing is not supported: " + scenario.CompareActualToExpectedUsing);
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Cloning
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Clone___Should_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<TreeTableContent>();

                // Act
                var actual = (TreeTableContent)systemUnderTest.Clone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepClone___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<TreeTableContent>();

                // Act
                var actual = systemUnderTest.DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);

                if (systemUnderTest.Headers == null)
                {
                    actual.Headers.AsTest().Must().BeNull();
                }
                else if (!actual.Headers.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Headers.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Headers);
                }

                if (systemUnderTest.Rows == null)
                {
                    actual.Rows.AsTest().Must().BeNull();
                }
                else if (!actual.Rows.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Rows.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Rows);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepCloneWith___Should_deep_clone_object_and_replace_the_associated_property_with_the_provided_value___When_called()
            {
                var propertyNames = new string[] { "Headers", "Rows", "ShouldScrollVertical", "ShouldScrollHorizontal", "ShouldSyncHeaderScroll", "ShouldSyncFooterScroll", "ShouldIncludeFooter", "ShouldFreezeFirstColumn", "DeadAreaColor", "MaxRows", "CssStyle" };

                var scenarios = DeepCloneWithTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if (scenario.WithPropertyName == DeepCloneWithTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioWithPropertyName)
                    {
                        continue;
                    }

                    // Act
                    var actual = (TreeTableContent)scenario.DeepCloneWithMethod.Invoke(scenario.SystemUnderTest, new[] { scenario.WithValue });

                    // Assert
                    foreach(var propertyName in propertyNames)
                    {
                        var propertyInfo = typeof(TreeTableContent).GetPropertyFiltered(propertyName, MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public);

                        var actualPropertyValue = propertyInfo.GetValue(actual);

                        var comparisonValue = propertyName == scenario.WithPropertyName
                            ? scenario.WithValue
                            : propertyInfo.GetValue(scenario.SystemUnderTest);

                        if (actualPropertyValue == null)
                        {
                            comparisonValue.Must().BeNull(because: scenario.Id);
                        }
                        else
                        {
                            // We use the runtime type here to solve for the case where the object is a boxed value type.
                            var actualPropertyValueRuntimeType = actualPropertyValue.GetType();

                            if (actualPropertyValueRuntimeType.IsValueType || (actualPropertyValueRuntimeType == typeof(string)))
                            {
                                // actualPropertyValue and comparisonValue are declared as typeof(object), but
                                // BeEqualTo (which uses IsEqualTo), will do the right thing by comparing the
                                // objects using their runtime type.
                                actualPropertyValue.AsTest().Must().BeEqualTo(comparisonValue, because: scenario.Id);
                            }
                            else
                            {
                                if (propertyName == scenario.WithPropertyName)
                                {
                                    actualPropertyValue.AsTest().Must().BeSameReferenceAs(comparisonValue, because: scenario.Id);
                                }
                                else
                                {
                                    actualPropertyValue.AsTest().Must().NotBeSameReferenceAs(comparisonValue, because: scenario.Id);
                                }
                            }
                        }
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Serialization
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<TreeTableContent>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<TreeTableContent>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<TreeTableContent>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<TreeTableContent>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Equality
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                TreeTableContent systemUnderTest1 = null;
                TreeTableContent systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 == systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    TreeTableContent systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest == scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject == systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeFalse(because: scenario.Id);
                    actual2.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject == scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                TreeTableContent systemUnderTest1 = null;
                TreeTableContent systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 != systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    TreeTableContent systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest != scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject != systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeTrue(because: scenario.Id);
                    actual2.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject != scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_TreeTableContent___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    TreeTableContent systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals(systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_TreeTableContent___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_TreeTableContent___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_TreeTableContent___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_TreeTableContent___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)null);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Hashing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_not_be_equal_for_two_objects___When_objects_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var unexpected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().NotContainElement(unexpected, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_be_equal_for_two_objects___When_objects_have_the_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var expected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(expected, because: scenario.Id);
                }
            }
        }
    }
}