// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.189.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Vuescape.DotNet.Domain
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;

    using global::OBeautifulCode.Cloning.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Type;
    using global::OBeautifulCode.Type.Recipes;

    using static global::System.FormattableString;

    [Serializable]
    public partial class TreeTableRow : IModel<TreeTableRow>
    {
        /// <summary>
        /// Determines whether two objects of type <see cref="TreeTableRow"/> are equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are equal; otherwise false.</returns>
        public static bool operator ==(TreeTableRow left, TreeTableRow right)
        {
            if (ReferenceEquals(left, right))
            {
                return true;
            }

            if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
            {
                return false;
            }

            var result = left.Equals(right);

            return result;
        }

        /// <summary>
        /// Determines whether two objects of type <see cref="TreeTableRow"/> are not equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are not equal; otherwise false.</returns>
        public static bool operator !=(TreeTableRow left, TreeTableRow right) => !(left == right);

        /// <inheritdoc />
        public bool Equals(TreeTableRow other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (ReferenceEquals(other, null))
            {
                return false;
            }

            var result = this.Id.IsEqualTo(other.Id, StringComparer.Ordinal)
                      && this.Cells.IsEqualTo(other.Cells)
                      && this.CssClasses.IsEqualTo(other.CssClasses, StringComparer.Ordinal)
                      && this.CssStyles.IsEqualTo(other.CssStyles)
                      && this.Renderer.IsEqualTo(other.Renderer, StringComparer.Ordinal)
                      && this.Depth.IsEqualTo(other.Depth)
                      && this.IsExpandable.IsEqualTo(other.IsExpandable)
                      && this.IsExpanded.IsEqualTo(other.IsExpanded)
                      && this.IsVisible.IsEqualTo(other.IsVisible)
                      && this.IsSelected.IsEqualTo(other.IsSelected)
                      && this.IsFocused.IsEqualTo(other.IsFocused)
                      && this.Links.IsEqualTo(other.Links)
                      && this.Children.IsEqualTo(other.Children)
                      && this.ShouldDisplayChildren.IsEqualTo(other.ShouldDisplayChildren)
                      && this.ExpandedSummaryRows.IsEqualTo(other.ExpandedSummaryRows)
                      && this.CollapsedSummaryRows.IsEqualTo(other.CollapsedSummaryRows);

            return result;
        }

        /// <inheritdoc />
        public override bool Equals(object obj) => this == (obj as TreeTableRow);

        /// <inheritdoc />
        public override int GetHashCode() => HashCodeHelper.Initialize()
            .Hash(this.Id)
            .Hash(this.Cells)
            .Hash(this.CssClasses)
            .Hash(this.CssStyles)
            .Hash(this.Renderer)
            .Hash(this.Depth)
            .Hash(this.IsExpandable)
            .Hash(this.IsExpanded)
            .Hash(this.IsVisible)
            .Hash(this.IsSelected)
            .Hash(this.IsFocused)
            .Hash(this.Links)
            .Hash(this.Children)
            .Hash(this.ShouldDisplayChildren)
            .Hash(this.ExpandedSummaryRows)
            .Hash(this.CollapsedSummaryRows)
            .Value;

        /// <inheritdoc />
        public object Clone() => this.DeepClone();

        /// <inheritdoc />
        public TreeTableRow DeepClone()
        {
            var result = new TreeTableRow(
                                 this.Id?.DeepClone(),
                                 this.Cells?.DeepClone(),
                                 this.Depth?.DeepClone(),
                                 this.CssClasses?.DeepClone(),
                                 this.CssStyles?.DeepClone(),
                                 this.Renderer?.DeepClone(),
                                 this.IsExpandable.DeepClone(),
                                 this.IsExpanded.DeepClone(),
                                 this.IsVisible.DeepClone(),
                                 this.IsSelected.DeepClone(),
                                 this.IsFocused?.DeepClone(),
                                 this.Links?.DeepClone(),
                                 this.Children?.DeepClone(),
                                 (bool?)this.ShouldDisplayChildren.DeepClone(),
                                 this.ExpandedSummaryRows?.DeepClone(),
                                 this.CollapsedSummaryRows?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Id" />.
        /// </summary>
        /// <param name="id">The new <see cref="Id" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="TreeTableRow" /> using the specified <paramref name="id" /> for <see cref="Id" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public TreeTableRow DeepCloneWithId(string id)
        {
            var result = new TreeTableRow(
                                 id,
                                 this.Cells?.DeepClone(),
                                 this.Depth?.DeepClone(),
                                 this.CssClasses?.DeepClone(),
                                 this.CssStyles?.DeepClone(),
                                 this.Renderer?.DeepClone(),
                                 this.IsExpandable.DeepClone(),
                                 this.IsExpanded.DeepClone(),
                                 this.IsVisible.DeepClone(),
                                 this.IsSelected.DeepClone(),
                                 this.IsFocused?.DeepClone(),
                                 this.Links?.DeepClone(),
                                 this.Children?.DeepClone(),
                                 (bool?)this.ShouldDisplayChildren.DeepClone(),
                                 this.ExpandedSummaryRows?.DeepClone(),
                                 this.CollapsedSummaryRows?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Cells" />.
        /// </summary>
        /// <param name="cells">The new <see cref="Cells" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="TreeTableRow" /> using the specified <paramref name="cells" /> for <see cref="Cells" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public TreeTableRow DeepCloneWithCells(IReadOnlyList<TreeTableCell> cells)
        {
            var result = new TreeTableRow(
                                 this.Id?.DeepClone(),
                                 cells,
                                 this.Depth?.DeepClone(),
                                 this.CssClasses?.DeepClone(),
                                 this.CssStyles?.DeepClone(),
                                 this.Renderer?.DeepClone(),
                                 this.IsExpandable.DeepClone(),
                                 this.IsExpanded.DeepClone(),
                                 this.IsVisible.DeepClone(),
                                 this.IsSelected.DeepClone(),
                                 this.IsFocused?.DeepClone(),
                                 this.Links?.DeepClone(),
                                 this.Children?.DeepClone(),
                                 (bool?)this.ShouldDisplayChildren.DeepClone(),
                                 this.ExpandedSummaryRows?.DeepClone(),
                                 this.CollapsedSummaryRows?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="CssClasses" />.
        /// </summary>
        /// <param name="cssClasses">The new <see cref="CssClasses" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="TreeTableRow" /> using the specified <paramref name="cssClasses" /> for <see cref="CssClasses" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public TreeTableRow DeepCloneWithCssClasses(string cssClasses)
        {
            var result = new TreeTableRow(
                                 this.Id?.DeepClone(),
                                 this.Cells?.DeepClone(),
                                 this.Depth?.DeepClone(),
                                 cssClasses,
                                 this.CssStyles?.DeepClone(),
                                 this.Renderer?.DeepClone(),
                                 this.IsExpandable.DeepClone(),
                                 this.IsExpanded.DeepClone(),
                                 this.IsVisible.DeepClone(),
                                 this.IsSelected.DeepClone(),
                                 this.IsFocused?.DeepClone(),
                                 this.Links?.DeepClone(),
                                 this.Children?.DeepClone(),
                                 (bool?)this.ShouldDisplayChildren.DeepClone(),
                                 this.ExpandedSummaryRows?.DeepClone(),
                                 this.CollapsedSummaryRows?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="CssStyles" />.
        /// </summary>
        /// <param name="cssStyles">The new <see cref="CssStyles" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="TreeTableRow" /> using the specified <paramref name="cssStyles" /> for <see cref="CssStyles" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public TreeTableRow DeepCloneWithCssStyles(IReadOnlyDictionary<string, string> cssStyles)
        {
            var result = new TreeTableRow(
                                 this.Id?.DeepClone(),
                                 this.Cells?.DeepClone(),
                                 this.Depth?.DeepClone(),
                                 this.CssClasses?.DeepClone(),
                                 cssStyles,
                                 this.Renderer?.DeepClone(),
                                 this.IsExpandable.DeepClone(),
                                 this.IsExpanded.DeepClone(),
                                 this.IsVisible.DeepClone(),
                                 this.IsSelected.DeepClone(),
                                 this.IsFocused?.DeepClone(),
                                 this.Links?.DeepClone(),
                                 this.Children?.DeepClone(),
                                 (bool?)this.ShouldDisplayChildren.DeepClone(),
                                 this.ExpandedSummaryRows?.DeepClone(),
                                 this.CollapsedSummaryRows?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Renderer" />.
        /// </summary>
        /// <param name="renderer">The new <see cref="Renderer" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="TreeTableRow" /> using the specified <paramref name="renderer" /> for <see cref="Renderer" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public TreeTableRow DeepCloneWithRenderer(string renderer)
        {
            var result = new TreeTableRow(
                                 this.Id?.DeepClone(),
                                 this.Cells?.DeepClone(),
                                 this.Depth?.DeepClone(),
                                 this.CssClasses?.DeepClone(),
                                 this.CssStyles?.DeepClone(),
                                 renderer,
                                 this.IsExpandable.DeepClone(),
                                 this.IsExpanded.DeepClone(),
                                 this.IsVisible.DeepClone(),
                                 this.IsSelected.DeepClone(),
                                 this.IsFocused?.DeepClone(),
                                 this.Links?.DeepClone(),
                                 this.Children?.DeepClone(),
                                 (bool?)this.ShouldDisplayChildren.DeepClone(),
                                 this.ExpandedSummaryRows?.DeepClone(),
                                 this.CollapsedSummaryRows?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Depth" />.
        /// </summary>
        /// <param name="depth">The new <see cref="Depth" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="TreeTableRow" /> using the specified <paramref name="depth" /> for <see cref="Depth" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public TreeTableRow DeepCloneWithDepth(int? depth)
        {
            var result = new TreeTableRow(
                                 this.Id?.DeepClone(),
                                 this.Cells?.DeepClone(),
                                 depth,
                                 this.CssClasses?.DeepClone(),
                                 this.CssStyles?.DeepClone(),
                                 this.Renderer?.DeepClone(),
                                 this.IsExpandable.DeepClone(),
                                 this.IsExpanded.DeepClone(),
                                 this.IsVisible.DeepClone(),
                                 this.IsSelected.DeepClone(),
                                 this.IsFocused?.DeepClone(),
                                 this.Links?.DeepClone(),
                                 this.Children?.DeepClone(),
                                 (bool?)this.ShouldDisplayChildren.DeepClone(),
                                 this.ExpandedSummaryRows?.DeepClone(),
                                 this.CollapsedSummaryRows?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="IsExpandable" />.
        /// </summary>
        /// <param name="isExpandable">The new <see cref="IsExpandable" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="TreeTableRow" /> using the specified <paramref name="isExpandable" /> for <see cref="IsExpandable" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public TreeTableRow DeepCloneWithIsExpandable(bool isExpandable)
        {
            var result = new TreeTableRow(
                                 this.Id?.DeepClone(),
                                 this.Cells?.DeepClone(),
                                 this.Depth?.DeepClone(),
                                 this.CssClasses?.DeepClone(),
                                 this.CssStyles?.DeepClone(),
                                 this.Renderer?.DeepClone(),
                                 isExpandable,
                                 this.IsExpanded.DeepClone(),
                                 this.IsVisible.DeepClone(),
                                 this.IsSelected.DeepClone(),
                                 this.IsFocused?.DeepClone(),
                                 this.Links?.DeepClone(),
                                 this.Children?.DeepClone(),
                                 (bool?)this.ShouldDisplayChildren.DeepClone(),
                                 this.ExpandedSummaryRows?.DeepClone(),
                                 this.CollapsedSummaryRows?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="IsExpanded" />.
        /// </summary>
        /// <param name="isExpanded">The new <see cref="IsExpanded" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="TreeTableRow" /> using the specified <paramref name="isExpanded" /> for <see cref="IsExpanded" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public TreeTableRow DeepCloneWithIsExpanded(bool isExpanded)
        {
            var result = new TreeTableRow(
                                 this.Id?.DeepClone(),
                                 this.Cells?.DeepClone(),
                                 this.Depth?.DeepClone(),
                                 this.CssClasses?.DeepClone(),
                                 this.CssStyles?.DeepClone(),
                                 this.Renderer?.DeepClone(),
                                 this.IsExpandable.DeepClone(),
                                 isExpanded,
                                 this.IsVisible.DeepClone(),
                                 this.IsSelected.DeepClone(),
                                 this.IsFocused?.DeepClone(),
                                 this.Links?.DeepClone(),
                                 this.Children?.DeepClone(),
                                 (bool?)this.ShouldDisplayChildren.DeepClone(),
                                 this.ExpandedSummaryRows?.DeepClone(),
                                 this.CollapsedSummaryRows?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="IsVisible" />.
        /// </summary>
        /// <param name="isVisible">The new <see cref="IsVisible" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="TreeTableRow" /> using the specified <paramref name="isVisible" /> for <see cref="IsVisible" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public TreeTableRow DeepCloneWithIsVisible(bool isVisible)
        {
            var result = new TreeTableRow(
                                 this.Id?.DeepClone(),
                                 this.Cells?.DeepClone(),
                                 this.Depth?.DeepClone(),
                                 this.CssClasses?.DeepClone(),
                                 this.CssStyles?.DeepClone(),
                                 this.Renderer?.DeepClone(),
                                 this.IsExpandable.DeepClone(),
                                 this.IsExpanded.DeepClone(),
                                 isVisible,
                                 this.IsSelected.DeepClone(),
                                 this.IsFocused?.DeepClone(),
                                 this.Links?.DeepClone(),
                                 this.Children?.DeepClone(),
                                 (bool?)this.ShouldDisplayChildren.DeepClone(),
                                 this.ExpandedSummaryRows?.DeepClone(),
                                 this.CollapsedSummaryRows?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="IsSelected" />.
        /// </summary>
        /// <param name="isSelected">The new <see cref="IsSelected" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="TreeTableRow" /> using the specified <paramref name="isSelected" /> for <see cref="IsSelected" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public TreeTableRow DeepCloneWithIsSelected(bool isSelected)
        {
            var result = new TreeTableRow(
                                 this.Id?.DeepClone(),
                                 this.Cells?.DeepClone(),
                                 this.Depth?.DeepClone(),
                                 this.CssClasses?.DeepClone(),
                                 this.CssStyles?.DeepClone(),
                                 this.Renderer?.DeepClone(),
                                 this.IsExpandable.DeepClone(),
                                 this.IsExpanded.DeepClone(),
                                 this.IsVisible.DeepClone(),
                                 isSelected,
                                 this.IsFocused?.DeepClone(),
                                 this.Links?.DeepClone(),
                                 this.Children?.DeepClone(),
                                 (bool?)this.ShouldDisplayChildren.DeepClone(),
                                 this.ExpandedSummaryRows?.DeepClone(),
                                 this.CollapsedSummaryRows?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="IsFocused" />.
        /// </summary>
        /// <param name="isFocused">The new <see cref="IsFocused" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="TreeTableRow" /> using the specified <paramref name="isFocused" /> for <see cref="IsFocused" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public TreeTableRow DeepCloneWithIsFocused(bool? isFocused)
        {
            var result = new TreeTableRow(
                                 this.Id?.DeepClone(),
                                 this.Cells?.DeepClone(),
                                 this.Depth?.DeepClone(),
                                 this.CssClasses?.DeepClone(),
                                 this.CssStyles?.DeepClone(),
                                 this.Renderer?.DeepClone(),
                                 this.IsExpandable.DeepClone(),
                                 this.IsExpanded.DeepClone(),
                                 this.IsVisible.DeepClone(),
                                 this.IsSelected.DeepClone(),
                                 isFocused,
                                 this.Links?.DeepClone(),
                                 this.Children?.DeepClone(),
                                 (bool?)this.ShouldDisplayChildren.DeepClone(),
                                 this.ExpandedSummaryRows?.DeepClone(),
                                 this.CollapsedSummaryRows?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Links" />.
        /// </summary>
        /// <param name="links">The new <see cref="Links" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="TreeTableRow" /> using the specified <paramref name="links" /> for <see cref="Links" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public TreeTableRow DeepCloneWithLinks(IReadOnlyDictionary<string, Link> links)
        {
            var result = new TreeTableRow(
                                 this.Id?.DeepClone(),
                                 this.Cells?.DeepClone(),
                                 this.Depth?.DeepClone(),
                                 this.CssClasses?.DeepClone(),
                                 this.CssStyles?.DeepClone(),
                                 this.Renderer?.DeepClone(),
                                 this.IsExpandable.DeepClone(),
                                 this.IsExpanded.DeepClone(),
                                 this.IsVisible.DeepClone(),
                                 this.IsSelected.DeepClone(),
                                 this.IsFocused?.DeepClone(),
                                 links,
                                 this.Children?.DeepClone(),
                                 (bool?)this.ShouldDisplayChildren.DeepClone(),
                                 this.ExpandedSummaryRows?.DeepClone(),
                                 this.CollapsedSummaryRows?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Children" />.
        /// </summary>
        /// <param name="children">The new <see cref="Children" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="TreeTableRow" /> using the specified <paramref name="children" /> for <see cref="Children" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public TreeTableRow DeepCloneWithChildren(IReadOnlyList<TreeTableRow> children)
        {
            var result = new TreeTableRow(
                                 this.Id?.DeepClone(),
                                 this.Cells?.DeepClone(),
                                 this.Depth?.DeepClone(),
                                 this.CssClasses?.DeepClone(),
                                 this.CssStyles?.DeepClone(),
                                 this.Renderer?.DeepClone(),
                                 this.IsExpandable.DeepClone(),
                                 this.IsExpanded.DeepClone(),
                                 this.IsVisible.DeepClone(),
                                 this.IsSelected.DeepClone(),
                                 this.IsFocused?.DeepClone(),
                                 this.Links?.DeepClone(),
                                 children,
                                 (bool?)this.ShouldDisplayChildren.DeepClone(),
                                 this.ExpandedSummaryRows?.DeepClone(),
                                 this.CollapsedSummaryRows?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ShouldDisplayChildren" />.
        /// </summary>
        /// <param name="shouldDisplayChildren">The new <see cref="ShouldDisplayChildren" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="TreeTableRow" /> using the specified <paramref name="shouldDisplayChildren" /> for <see cref="ShouldDisplayChildren" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public TreeTableRow DeepCloneWithShouldDisplayChildren(bool shouldDisplayChildren)
        {
            var result = new TreeTableRow(
                                 this.Id?.DeepClone(),
                                 this.Cells?.DeepClone(),
                                 this.Depth?.DeepClone(),
                                 this.CssClasses?.DeepClone(),
                                 this.CssStyles?.DeepClone(),
                                 this.Renderer?.DeepClone(),
                                 this.IsExpandable.DeepClone(),
                                 this.IsExpanded.DeepClone(),
                                 this.IsVisible.DeepClone(),
                                 this.IsSelected.DeepClone(),
                                 this.IsFocused?.DeepClone(),
                                 this.Links?.DeepClone(),
                                 this.Children?.DeepClone(),
                                 (bool?)shouldDisplayChildren,
                                 this.ExpandedSummaryRows?.DeepClone(),
                                 this.CollapsedSummaryRows?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ExpandedSummaryRows" />.
        /// </summary>
        /// <param name="expandedSummaryRows">The new <see cref="ExpandedSummaryRows" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="TreeTableRow" /> using the specified <paramref name="expandedSummaryRows" /> for <see cref="ExpandedSummaryRows" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public TreeTableRow DeepCloneWithExpandedSummaryRows(IReadOnlyList<TreeTableRow> expandedSummaryRows)
        {
            var result = new TreeTableRow(
                                 this.Id?.DeepClone(),
                                 this.Cells?.DeepClone(),
                                 this.Depth?.DeepClone(),
                                 this.CssClasses?.DeepClone(),
                                 this.CssStyles?.DeepClone(),
                                 this.Renderer?.DeepClone(),
                                 this.IsExpandable.DeepClone(),
                                 this.IsExpanded.DeepClone(),
                                 this.IsVisible.DeepClone(),
                                 this.IsSelected.DeepClone(),
                                 this.IsFocused?.DeepClone(),
                                 this.Links?.DeepClone(),
                                 this.Children?.DeepClone(),
                                 (bool?)this.ShouldDisplayChildren.DeepClone(),
                                 expandedSummaryRows,
                                 this.CollapsedSummaryRows?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="CollapsedSummaryRows" />.
        /// </summary>
        /// <param name="collapsedSummaryRows">The new <see cref="CollapsedSummaryRows" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="TreeTableRow" /> using the specified <paramref name="collapsedSummaryRows" /> for <see cref="CollapsedSummaryRows" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public TreeTableRow DeepCloneWithCollapsedSummaryRows(IReadOnlyList<TreeTableRow> collapsedSummaryRows)
        {
            var result = new TreeTableRow(
                                 this.Id?.DeepClone(),
                                 this.Cells?.DeepClone(),
                                 this.Depth?.DeepClone(),
                                 this.CssClasses?.DeepClone(),
                                 this.CssStyles?.DeepClone(),
                                 this.Renderer?.DeepClone(),
                                 this.IsExpandable.DeepClone(),
                                 this.IsExpanded.DeepClone(),
                                 this.IsVisible.DeepClone(),
                                 this.IsSelected.DeepClone(),
                                 this.IsFocused?.DeepClone(),
                                 this.Links?.DeepClone(),
                                 this.Children?.DeepClone(),
                                 (bool?)this.ShouldDisplayChildren.DeepClone(),
                                 this.ExpandedSummaryRows?.DeepClone(),
                                 collapsedSummaryRows);

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        public override string ToString()
        {
            var result = Invariant($"Vuescape.DotNet.Domain.TreeTableRow: Id = {this.Id?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Cells = {this.Cells?.ToString() ?? "<null>"}, CssClasses = {this.CssClasses?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, CssStyles = {this.CssStyles?.ToString() ?? "<null>"}, Renderer = {this.Renderer?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Depth = {this.Depth?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, IsExpandable = {this.IsExpandable.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, IsExpanded = {this.IsExpanded.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, IsVisible = {this.IsVisible.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, IsSelected = {this.IsSelected.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, IsFocused = {this.IsFocused?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Links = {this.Links?.ToString() ?? "<null>"}, Children = {this.Children?.ToString() ?? "<null>"}, ShouldDisplayChildren = {this.ShouldDisplayChildren.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ExpandedSummaryRows = {this.ExpandedSummaryRows?.ToString() ?? "<null>"}, CollapsedSummaryRows = {this.CollapsedSummaryRows?.ToString() ?? "<null>"}.");

            return result;
        }
    }
}