// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.199.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Vuescape.DotNet.Domain.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;

    using global::FakeItEasy;

    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.DataStructure;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Type;

    using global::Vuescape.DotNet.Domain;

    /// <summary>
    /// The default (code generated) Dummy Factory.
    /// Derive from this class to add any overriding or custom registrations.
    /// </summary>
    [ExcludeFromCodeCoverage]
    [GeneratedCode("OBeautifulCode.CodeGen.ModelObject", "1.0.199.0")]
#if !VuescapeDotNetSolution
    internal
#else
    public
#endif
    abstract class DefaultDotNetDummyFactory : IDummyFactory
    {
        public DefaultDotNetDummyFactory()
        {
            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(DownloadAction),
                        typeof(NavigationAction),
                        typeof(NoAction),
                        typeof(SelectNavigationAction)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ActionBase)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ActionButtonComponent(
                                 A.Dummy<ActionButtonComponentPayload>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ActionButtonComponentPayload(
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyList<ActionMenuItem>>(),
                                 A.Dummy<bool>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IconPosition>(),
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ActionMenuItem(
                                 A.Dummy<string>(),
                                 A.Dummy<ActionBase>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IconPosition>(),
                                 A.Dummy<bool>(),
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new Badge(
                                 A.Dummy<string>(),
                                 A.Dummy<BadgeSeverity?>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ButtonComponent(
                                 A.Dummy<ButtonComponentPayload>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ButtonComponentPayload(
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<ActionBase>(),
                                 A.Dummy<IReadOnlyList<string>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new Vuescape.DotNet.Domain.CellFormat(
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<Vuescape.DotNet.Domain.HorizontalAlignment?>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new Chiclet(
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<bool>(),
                                 A.Dummy<ActionBase>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ChicletGridComponent(
                                 A.Dummy<ChicletGridComponentPayload>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ChicletGridComponentPayload(
                                 A.Dummy<IReadOnlyList<Chiclet>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ChicletNavigationItem(
                                 A.Dummy<NavigationLink>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ConstrainTreeTableHeightClientBehavior),
                        typeof(GeneratePdfClientBehavior),
                        typeof(SortTreeTableClientBehavior),
                        typeof(ToggleTreeTableChildRowExpansionClientBehavior)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ClientBehaviorBase)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ColumnDefinition(
                                 A.Dummy<ColumnWidthBehavior>(),
                                 A.Dummy<ColumnWrapBehavior>(),
                                 A.Dummy<decimal?>(),
                                 A.Dummy<UnitOfMeasure?>(),
                                 A.Dummy<bool>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ColumnSorter(
                                 A.Dummy<SortDirection>(),
                                 A.Dummy<SortComparisonStrategy>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ComparableValue(
                                 A.Dummy<string>(),
                                 A.Dummy<decimal?>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<bool?>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ConstrainTreeTableHeightClientBehavior
                             {
                                 Name = A.Dummy<string>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new Content(
                                 A.Dummy<string>(),
                                 A.Dummy<ResourceKind>(),
                                 A.Dummy<PayloadEncodingKind>(),
                                 A.Dummy<IReadOnlyDictionary<string, UiObject>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ConvertObcToVuescapeReportOp(
                                 A.Dummy<OBeautifulCode.DataStructure.Report>(),
                                 A.Dummy<ObcToVuescapeConversionContext>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new CssStyles(
                                 A.Dummy<CssStyleWrapper>(),
                                 A.Dummy<IReadOnlyList<CssStyleWrapper>>(),
                                 A.Dummy<IReadOnlyList<IReadOnlyList<CssStyleWrapper>>>(),
                                 A.Dummy<CssStyleWrapper>(),
                                 A.Dummy<IReadOnlyList<CssStyleWrapper>>(),
                                 A.Dummy<CssStyleWrapper>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new CssStyleWrapper(
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ActionButtonComponent),
                        typeof(ButtonComponent),
                        typeof(ChicletGridComponent),
                        typeof(DownloadAction),
                        typeof(FileUploadComponent),
                        typeof(NavigationAction),
                        typeof(NoAction),
                        typeof(ReadOnlyFileUploadComponent),
                        typeof(SelectComponent),
                        typeof(SelectNavigationAction),
                        typeof(TableComponent),
                        typeof(TableTabsComponent),
                        typeof(TextComponent),
                        typeof(TextLinkComponent)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (DiscriminatedTypeBase)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new DisplayReportOp(
                                 A.Dummy<ILinkedResource>(),
                                 A.Dummy<PaneKind>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<ReportPaneTitleBarButtons?>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new DownloadAction(
                                 A.Dummy<DownloadActionPayload>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new DownloadActionPayload(
                                 A.Dummy<string>(),
                                 A.Dummy<bool>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new DownloadFileOp(
                                 A.Dummy<ILinkedResource>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new Feature(
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyList<IVoidOperation>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new FeatureNavigationRegistration(
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyList<NavigationItemBase>>(),
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new FileUploadComponent(
                                 A.Dummy<FileUploadComponentPayload>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new FileUploadComponentPayload(
                                 A.Dummy<string>(),
                                 A.Dummy<bool>(),
                                 A.Dummy<string>(),
                                 A.Dummy<long?>(),
                                 A.Dummy<IReadOnlyList<string>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GeneratePdfClientBehavior
                             {
                                 Name = A.Dummy<string>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new Hover(
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<HoverContentKind>(),
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new Link(
                                 A.Dummy<string>(),
                                 A.Dummy<Vuescape.DotNet.Domain.LinkTarget>(),
                                 A.Dummy<string>(),
                                 A.Dummy<CssStyles>(),
                                 A.Dummy<ResourceKind>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(DisplayReportOp),
                        typeof(DownloadFileOp)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (LinkedResourceOpBase)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(TextLinkPayload)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (LinkPayloadBase)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new MenuNavigationItem(
                                 A.Dummy<NavigationLink>(),
                                 A.Dummy<string>(),
                                 A.Dummy<Vuescape.DotNet.Domain.HorizontalAlignment>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new MetadataLineItem(
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new NavigationAction(
                                 A.Dummy<NavigationActionPayload>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new NavigationActionPayload(
                                 A.Dummy<string>(),
                                 A.Dummy<Vuescape.DotNet.Domain.LinkTarget>(),
                                 A.Dummy<bool?>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ChicletNavigationItem),
                        typeof(MenuNavigationItem)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (NavigationItemBase)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new NavigationLink(
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new NoAction(
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ObcToVuescapeConversionContext(
                                 A.Dummy<ReportConversionMode>(),
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<CultureKind?>(),
                                 A.Dummy<StandardTimeZone?>(),
                                 A.Dummy<bool>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ButtonComponent),
                        typeof(ChicletGridComponent),
                        typeof(FileUploadComponent),
                        typeof(ReadOnlyFileUploadComponent),
                        typeof(SelectComponent),
                        typeof(TableComponent),
                        typeof(TableTabsComponent),
                        typeof(TextComponent),
                        typeof(TextLinkComponent)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (PaneComponentBase)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new PaneItem(
                                 A.Dummy<IReadOnlyList<PaneComponentBase>>(),
                                 A.Dummy<string>(),
                                 A.Dummy<Vuescape.DotNet.Domain.HorizontalAlignment>(),
                                 A.Dummy<Vuescape.DotNet.Domain.VerticalAlignment>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new PaneLayout(
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyList<PaneSection>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new PaneSection(
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyList<PaneItem>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ReadOnlyFileUploadComponent(
                                 A.Dummy<ReadOnlyFileUploadComponentPayload>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ReadOnlyFileUploadComponentPayload(
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<long>(),
                                 A.Dummy<NavigationAction>(),
                                 A.Dummy<IReadOnlyList<MetadataLineItem>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new Vuescape.DotNet.Domain.Report(
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyList<Vuescape.DotNet.Domain.Section>>(),
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyList<Link>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ReportLayout(
                                 A.Dummy<string>(),
                                 A.Dummy<PaneLayout>(),
                                 A.Dummy<string>(),
                                 A.Dummy<PaneKind?>(),
                                 A.Dummy<decimal?>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new Vuescape.DotNet.Domain.Section(
                                 A.Dummy<string>(),
                                 A.Dummy<Vuescape.DotNet.Domain.TreeTable>(),
                                 A.Dummy<string>(),
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new SelectComponent(
                                 A.Dummy<SelectComponentPayload>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new SelectComponentPayload(
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyList<SelectOption>>(),
                                 A.Dummy<SelectOption>(),
                                 A.Dummy<ActionBase>(),
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<bool?>(),
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new SelectNavigationAction(
                                 A.Dummy<NavigationActionPayload>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new SelectOption(
                                 A.Dummy<string>(),
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new SlottedUiObject(
                                 A.Dummy<IReadOnlyDictionary<string, UiObject>>(),
                                 A.Dummy<string>(),
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new SortTreeTableClientBehavior
                             {
                                 Name = A.Dummy<string>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(TableTab)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (Tab)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new TableCell(
                                 A.Dummy<string>(),
                                 A.Dummy<PaneComponentBase>(),
                                 A.Dummy<UiObject>(),
                                 A.Dummy<ComparableValue>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new TableColumn(
                                 A.Dummy<string>(),
                                 A.Dummy<DataTypeKind?>(),
                                 A.Dummy<bool?>(),
                                 A.Dummy<SortModeKind?>(),
                                 A.Dummy<bool?>(),
                                 A.Dummy<FilterModeKind?>(),
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 A.Dummy<string>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<bool?>(),
                                 A.Dummy<string>(),
                                 A.Dummy<bool?>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new TableComponent(
                                 A.Dummy<TableComponentPayload>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new TableComponentPayload(
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyList<TableColumn>>(),
                                 A.Dummy<IReadOnlyList<TableRow>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new TableRow(
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyDictionary<string, TableCell>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new TableTab(
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<TableComponent>(),
                                 A.Dummy<Badge>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new TableTabsComponent(
                                 A.Dummy<TableTabsComponentPayload>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new TableTabsComponentPayload(
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyList<TableTab>>(),
                                 A.Dummy<SelectComponent>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new TextComponent(
                                 A.Dummy<TextComponentPayload>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new TextComponentPayload(
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<RenderTextAs>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new TextLinkComponent(
                                 A.Dummy<TextLinkPayload>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new TextLinkPayload(
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<NavigationAction>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ToggleTreeTableChildRowExpansionClientBehavior
                             {
                                 Name = A.Dummy<string>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new Vuescape.DotNet.Domain.TreeTable(
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyList<ColumnDefinition>>(),
                                 A.Dummy<TreeTableContent>(),
                                 A.Dummy<IReadOnlyCollection<ClientBehaviorBase>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new TreeTableCell(
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<Hover>(),
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<bool>(),
                                 A.Dummy<Vuescape.DotNet.Domain.CellFormat>(),
                                 A.Dummy<IReadOnlyDictionary<string, Link>>(),
                                 A.Dummy<SlottedUiObject>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new TreeTableContent(
                                 A.Dummy<IReadOnlyList<TreeTableHeaderRow>>(),
                                 A.Dummy<IReadOnlyList<TreeTableRow>>(),
                                 A.Dummy<IReadOnlyList<TreeTableRow>>(),
                                 A.Dummy<bool>(),
                                 A.Dummy<bool>(),
                                 A.Dummy<bool>(),
                                 A.Dummy<bool>(),
                                 A.Dummy<bool>(),
                                 A.Dummy<string>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 A.Dummy<SortLevel>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new TreeTableHeaderCell(
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<Hover>(),
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<bool>(),
                                 A.Dummy<ColumnSorter>(),
                                 A.Dummy<Vuescape.DotNet.Domain.CellFormat>(),
                                 A.Dummy<IReadOnlyDictionary<string, Link>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new TreeTableHeaderRow(
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyList<TreeTableHeaderCell>>(),
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new TreeTableRow(
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyList<TreeTableCell>>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 A.Dummy<string>(),
                                 A.Dummy<bool>(),
                                 A.Dummy<bool>(),
                                 A.Dummy<bool>(),
                                 A.Dummy<bool>(),
                                 A.Dummy<bool?>(),
                                 A.Dummy<IReadOnlyDictionary<string, Link>>(),
                                 A.Dummy<IReadOnlyList<TreeTableRow>>(),
                                 A.Dummy<bool?>(),
                                 A.Dummy<IReadOnlyList<TreeTableRow>>(),
                                 A.Dummy<IReadOnlyList<TreeTableRow>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new UiObject(
                                 A.Dummy<object>(),
                                 A.Dummy<UiObjectType?>(),
                                 A.Dummy<string>()));
        }

        /// <inheritdoc />
        public Priority Priority => new FakeItEasy.Priority(1);

        /// <inheritdoc />
        public bool CanCreate(Type type)
        {
            return false;
        }

        /// <inheritdoc />
        public object Create(Type type)
        {
            return null;
        }
    }
}