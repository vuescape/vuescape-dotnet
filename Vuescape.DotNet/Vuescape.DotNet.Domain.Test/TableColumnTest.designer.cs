// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.192.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Vuescape.DotNet.Domain.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.DateTime.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Reflection.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Recipes;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class TableColumnTest
    {
        private static readonly StringRepresentationTestScenarios<TableColumn> StringRepresentationTestScenarios = new StringRepresentationTestScenarios<TableColumn>()
            .AddScenario(() =>
                new StringRepresentationTestScenario<TableColumn>
                {
                    Name = "Default Code Generated Scenario",
                    SystemUnderTestExpectedStringRepresentationFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<TableColumn>();

                        var result = new SystemUnderTestExpectedStringRepresentation<TableColumn>
                        {
                            SystemUnderTest = systemUnderTest,
                            ExpectedStringRepresentation = Invariant($"Vuescape.DotNet.Domain.TableColumn: Id = {systemUnderTest.Id?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, DataType = {systemUnderTest.DataType?.ToString() ?? "<null>"}, IsSortable = {systemUnderTest.IsSortable?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, SortMode = {systemUnderTest.SortMode?.ToString() ?? "<null>"}, IsFilterable = {systemUnderTest.IsFilterable?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, FilterMode = {systemUnderTest.FilterMode?.ToString() ?? "<null>"}, HeaderText = {systemUnderTest.HeaderText?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, FooterText = {systemUnderTest.FooterText?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Style = {systemUnderTest.Style?.ToString() ?? "<null>"}, CssClass = {systemUnderTest.CssClass?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, HeaderStyle = {systemUnderTest.HeaderStyle?.ToString() ?? "<null>"}, CssHeaderClass = {systemUnderTest.CssHeaderClass?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, BodyStyle = {systemUnderTest.BodyStyle?.ToString() ?? "<null>"}, CssBodyClass = {systemUnderTest.CssBodyClass?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, FooterStyle = {systemUnderTest.FooterStyle?.ToString() ?? "<null>"}, CssFooterClass = {systemUnderTest.CssFooterClass?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Colspan = {systemUnderTest.Colspan?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Rowspan = {systemUnderTest.Rowspan?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, IsFrozen = {systemUnderTest.IsFrozen?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, AlignFrozen = {systemUnderTest.AlignFrozen?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, IsHidden = {systemUnderTest.IsHidden?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}."),
                        };

                        return result;
                    },
                });

        private static readonly ConstructorArgumentValidationTestScenarios<TableColumn> ConstructorArgumentValidationTestScenarios = new ConstructorArgumentValidationTestScenarios<TableColumn>()
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<TableColumn>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'id' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<TableColumn>();

                        var result = new TableColumn(
                                             null,
                                             referenceObject.DataType,
                                             referenceObject.IsSortable,
                                             referenceObject.SortMode,
                                             referenceObject.IsFilterable,
                                             referenceObject.FilterMode,
                                             referenceObject.HeaderText,
                                             referenceObject.FooterText,
                                             referenceObject.Style,
                                             referenceObject.CssClass,
                                             referenceObject.HeaderStyle,
                                             referenceObject.CssHeaderClass,
                                             referenceObject.BodyStyle,
                                             referenceObject.CssBodyClass,
                                             referenceObject.FooterStyle,
                                             referenceObject.CssFooterClass,
                                             referenceObject.Colspan,
                                             referenceObject.Rowspan,
                                             referenceObject.IsFrozen,
                                             referenceObject.AlignFrozen,
                                             referenceObject.IsHidden);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "id", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<TableColumn>
                {
                    Name = "constructor should throw ArgumentException when parameter 'id' is white space scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<TableColumn>();

                        var result = new TableColumn(
                                             Invariant($"  {Environment.NewLine}  "),
                                             referenceObject.DataType,
                                             referenceObject.IsSortable,
                                             referenceObject.SortMode,
                                             referenceObject.IsFilterable,
                                             referenceObject.FilterMode,
                                             referenceObject.HeaderText,
                                             referenceObject.FooterText,
                                             referenceObject.Style,
                                             referenceObject.CssClass,
                                             referenceObject.HeaderStyle,
                                             referenceObject.CssHeaderClass,
                                             referenceObject.BodyStyle,
                                             referenceObject.CssBodyClass,
                                             referenceObject.FooterStyle,
                                             referenceObject.CssFooterClass,
                                             referenceObject.Colspan,
                                             referenceObject.Rowspan,
                                             referenceObject.IsFrozen,
                                             referenceObject.AlignFrozen,
                                             referenceObject.IsHidden);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "id", "white space", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<TableColumn>
                {
                    Name = "constructor should throw ArgumentException when parameter 'style' contains a key-value pair with a null value scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<TableColumn>();

                        var dictionaryWithNullValue = referenceObject.Style.ToDictionary(_ => _.Key, _ => _.Value);

                        var randomKey = dictionaryWithNullValue.Keys.ElementAt(ThreadSafeRandom.Next(0, dictionaryWithNullValue.Count));

                        dictionaryWithNullValue[randomKey] = null;

                        var result = new TableColumn(
                                             referenceObject.Id,
                                             referenceObject.DataType,
                                             referenceObject.IsSortable,
                                             referenceObject.SortMode,
                                             referenceObject.IsFilterable,
                                             referenceObject.FilterMode,
                                             referenceObject.HeaderText,
                                             referenceObject.FooterText,
                                             dictionaryWithNullValue,
                                             referenceObject.CssClass,
                                             referenceObject.HeaderStyle,
                                             referenceObject.CssHeaderClass,
                                             referenceObject.BodyStyle,
                                             referenceObject.CssBodyClass,
                                             referenceObject.FooterStyle,
                                             referenceObject.CssFooterClass,
                                             referenceObject.Colspan,
                                             referenceObject.Rowspan,
                                             referenceObject.IsFrozen,
                                             referenceObject.AlignFrozen,
                                             referenceObject.IsHidden);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "style", "contains at least one key-value pair with a null value", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<TableColumn>
                {
                    Name = "constructor should throw ArgumentException when parameter 'headerStyle' contains a key-value pair with a null value scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<TableColumn>();

                        var dictionaryWithNullValue = referenceObject.HeaderStyle.ToDictionary(_ => _.Key, _ => _.Value);

                        var randomKey = dictionaryWithNullValue.Keys.ElementAt(ThreadSafeRandom.Next(0, dictionaryWithNullValue.Count));

                        dictionaryWithNullValue[randomKey] = null;

                        var result = new TableColumn(
                                             referenceObject.Id,
                                             referenceObject.DataType,
                                             referenceObject.IsSortable,
                                             referenceObject.SortMode,
                                             referenceObject.IsFilterable,
                                             referenceObject.FilterMode,
                                             referenceObject.HeaderText,
                                             referenceObject.FooterText,
                                             referenceObject.Style,
                                             referenceObject.CssClass,
                                             dictionaryWithNullValue,
                                             referenceObject.CssHeaderClass,
                                             referenceObject.BodyStyle,
                                             referenceObject.CssBodyClass,
                                             referenceObject.FooterStyle,
                                             referenceObject.CssFooterClass,
                                             referenceObject.Colspan,
                                             referenceObject.Rowspan,
                                             referenceObject.IsFrozen,
                                             referenceObject.AlignFrozen,
                                             referenceObject.IsHidden);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "headerStyle", "contains at least one key-value pair with a null value", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<TableColumn>
                {
                    Name = "constructor should throw ArgumentException when parameter 'bodyStyle' contains a key-value pair with a null value scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<TableColumn>();

                        var dictionaryWithNullValue = referenceObject.BodyStyle.ToDictionary(_ => _.Key, _ => _.Value);

                        var randomKey = dictionaryWithNullValue.Keys.ElementAt(ThreadSafeRandom.Next(0, dictionaryWithNullValue.Count));

                        dictionaryWithNullValue[randomKey] = null;

                        var result = new TableColumn(
                                             referenceObject.Id,
                                             referenceObject.DataType,
                                             referenceObject.IsSortable,
                                             referenceObject.SortMode,
                                             referenceObject.IsFilterable,
                                             referenceObject.FilterMode,
                                             referenceObject.HeaderText,
                                             referenceObject.FooterText,
                                             referenceObject.Style,
                                             referenceObject.CssClass,
                                             referenceObject.HeaderStyle,
                                             referenceObject.CssHeaderClass,
                                             dictionaryWithNullValue,
                                             referenceObject.CssBodyClass,
                                             referenceObject.FooterStyle,
                                             referenceObject.CssFooterClass,
                                             referenceObject.Colspan,
                                             referenceObject.Rowspan,
                                             referenceObject.IsFrozen,
                                             referenceObject.AlignFrozen,
                                             referenceObject.IsHidden);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "bodyStyle", "contains at least one key-value pair with a null value", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<TableColumn>
                {
                    Name = "constructor should throw ArgumentException when parameter 'footerStyle' contains a key-value pair with a null value scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<TableColumn>();

                        var dictionaryWithNullValue = referenceObject.FooterStyle.ToDictionary(_ => _.Key, _ => _.Value);

                        var randomKey = dictionaryWithNullValue.Keys.ElementAt(ThreadSafeRandom.Next(0, dictionaryWithNullValue.Count));

                        dictionaryWithNullValue[randomKey] = null;

                        var result = new TableColumn(
                                             referenceObject.Id,
                                             referenceObject.DataType,
                                             referenceObject.IsSortable,
                                             referenceObject.SortMode,
                                             referenceObject.IsFilterable,
                                             referenceObject.FilterMode,
                                             referenceObject.HeaderText,
                                             referenceObject.FooterText,
                                             referenceObject.Style,
                                             referenceObject.CssClass,
                                             referenceObject.HeaderStyle,
                                             referenceObject.CssHeaderClass,
                                             referenceObject.BodyStyle,
                                             referenceObject.CssBodyClass,
                                             dictionaryWithNullValue,
                                             referenceObject.CssFooterClass,
                                             referenceObject.Colspan,
                                             referenceObject.Rowspan,
                                             referenceObject.IsFrozen,
                                             referenceObject.AlignFrozen,
                                             referenceObject.IsHidden);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "footerStyle", "contains at least one key-value pair with a null value", },
                });

        private static readonly ConstructorPropertyAssignmentTestScenarios<TableColumn> ConstructorPropertyAssignmentTestScenarios = new ConstructorPropertyAssignmentTestScenarios<TableColumn>()
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<TableColumn>
                {
                    Name = "Id should return same 'id' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<TableColumn>();

                        var result = new SystemUnderTestExpectedPropertyValue<TableColumn>
                        {
                            SystemUnderTest = new TableColumn(
                                                      referenceObject.Id,
                                                      referenceObject.DataType,
                                                      referenceObject.IsSortable,
                                                      referenceObject.SortMode,
                                                      referenceObject.IsFilterable,
                                                      referenceObject.FilterMode,
                                                      referenceObject.HeaderText,
                                                      referenceObject.FooterText,
                                                      referenceObject.Style,
                                                      referenceObject.CssClass,
                                                      referenceObject.HeaderStyle,
                                                      referenceObject.CssHeaderClass,
                                                      referenceObject.BodyStyle,
                                                      referenceObject.CssBodyClass,
                                                      referenceObject.FooterStyle,
                                                      referenceObject.CssFooterClass,
                                                      referenceObject.Colspan,
                                                      referenceObject.Rowspan,
                                                      referenceObject.IsFrozen,
                                                      referenceObject.AlignFrozen,
                                                      referenceObject.IsHidden),
                            ExpectedPropertyValue = referenceObject.Id,
                        };

                        return result;
                    },
                    PropertyName = "Id",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<TableColumn>
                {
                    Name = "DataType should return same 'dataType' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<TableColumn>();

                        var result = new SystemUnderTestExpectedPropertyValue<TableColumn>
                        {
                            SystemUnderTest = new TableColumn(
                                                      referenceObject.Id,
                                                      referenceObject.DataType,
                                                      referenceObject.IsSortable,
                                                      referenceObject.SortMode,
                                                      referenceObject.IsFilterable,
                                                      referenceObject.FilterMode,
                                                      referenceObject.HeaderText,
                                                      referenceObject.FooterText,
                                                      referenceObject.Style,
                                                      referenceObject.CssClass,
                                                      referenceObject.HeaderStyle,
                                                      referenceObject.CssHeaderClass,
                                                      referenceObject.BodyStyle,
                                                      referenceObject.CssBodyClass,
                                                      referenceObject.FooterStyle,
                                                      referenceObject.CssFooterClass,
                                                      referenceObject.Colspan,
                                                      referenceObject.Rowspan,
                                                      referenceObject.IsFrozen,
                                                      referenceObject.AlignFrozen,
                                                      referenceObject.IsHidden),
                            ExpectedPropertyValue = referenceObject.DataType,
                        };

                        return result;
                    },
                    PropertyName = "DataType",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<TableColumn>
                {
                    Name = "IsSortable should return same 'isSortable' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<TableColumn>();

                        var result = new SystemUnderTestExpectedPropertyValue<TableColumn>
                        {
                            SystemUnderTest = new TableColumn(
                                                      referenceObject.Id,
                                                      referenceObject.DataType,
                                                      referenceObject.IsSortable,
                                                      referenceObject.SortMode,
                                                      referenceObject.IsFilterable,
                                                      referenceObject.FilterMode,
                                                      referenceObject.HeaderText,
                                                      referenceObject.FooterText,
                                                      referenceObject.Style,
                                                      referenceObject.CssClass,
                                                      referenceObject.HeaderStyle,
                                                      referenceObject.CssHeaderClass,
                                                      referenceObject.BodyStyle,
                                                      referenceObject.CssBodyClass,
                                                      referenceObject.FooterStyle,
                                                      referenceObject.CssFooterClass,
                                                      referenceObject.Colspan,
                                                      referenceObject.Rowspan,
                                                      referenceObject.IsFrozen,
                                                      referenceObject.AlignFrozen,
                                                      referenceObject.IsHidden),
                            ExpectedPropertyValue = referenceObject.IsSortable,
                        };

                        return result;
                    },
                    PropertyName = "IsSortable",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<TableColumn>
                {
                    Name = "SortMode should return same 'sortMode' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<TableColumn>();

                        var result = new SystemUnderTestExpectedPropertyValue<TableColumn>
                        {
                            SystemUnderTest = new TableColumn(
                                                      referenceObject.Id,
                                                      referenceObject.DataType,
                                                      referenceObject.IsSortable,
                                                      referenceObject.SortMode,
                                                      referenceObject.IsFilterable,
                                                      referenceObject.FilterMode,
                                                      referenceObject.HeaderText,
                                                      referenceObject.FooterText,
                                                      referenceObject.Style,
                                                      referenceObject.CssClass,
                                                      referenceObject.HeaderStyle,
                                                      referenceObject.CssHeaderClass,
                                                      referenceObject.BodyStyle,
                                                      referenceObject.CssBodyClass,
                                                      referenceObject.FooterStyle,
                                                      referenceObject.CssFooterClass,
                                                      referenceObject.Colspan,
                                                      referenceObject.Rowspan,
                                                      referenceObject.IsFrozen,
                                                      referenceObject.AlignFrozen,
                                                      referenceObject.IsHidden),
                            ExpectedPropertyValue = referenceObject.SortMode,
                        };

                        return result;
                    },
                    PropertyName = "SortMode",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<TableColumn>
                {
                    Name = "IsFilterable should return same 'isFilterable' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<TableColumn>();

                        var result = new SystemUnderTestExpectedPropertyValue<TableColumn>
                        {
                            SystemUnderTest = new TableColumn(
                                                      referenceObject.Id,
                                                      referenceObject.DataType,
                                                      referenceObject.IsSortable,
                                                      referenceObject.SortMode,
                                                      referenceObject.IsFilterable,
                                                      referenceObject.FilterMode,
                                                      referenceObject.HeaderText,
                                                      referenceObject.FooterText,
                                                      referenceObject.Style,
                                                      referenceObject.CssClass,
                                                      referenceObject.HeaderStyle,
                                                      referenceObject.CssHeaderClass,
                                                      referenceObject.BodyStyle,
                                                      referenceObject.CssBodyClass,
                                                      referenceObject.FooterStyle,
                                                      referenceObject.CssFooterClass,
                                                      referenceObject.Colspan,
                                                      referenceObject.Rowspan,
                                                      referenceObject.IsFrozen,
                                                      referenceObject.AlignFrozen,
                                                      referenceObject.IsHidden),
                            ExpectedPropertyValue = referenceObject.IsFilterable,
                        };

                        return result;
                    },
                    PropertyName = "IsFilterable",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<TableColumn>
                {
                    Name = "FilterMode should return same 'filterMode' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<TableColumn>();

                        var result = new SystemUnderTestExpectedPropertyValue<TableColumn>
                        {
                            SystemUnderTest = new TableColumn(
                                                      referenceObject.Id,
                                                      referenceObject.DataType,
                                                      referenceObject.IsSortable,
                                                      referenceObject.SortMode,
                                                      referenceObject.IsFilterable,
                                                      referenceObject.FilterMode,
                                                      referenceObject.HeaderText,
                                                      referenceObject.FooterText,
                                                      referenceObject.Style,
                                                      referenceObject.CssClass,
                                                      referenceObject.HeaderStyle,
                                                      referenceObject.CssHeaderClass,
                                                      referenceObject.BodyStyle,
                                                      referenceObject.CssBodyClass,
                                                      referenceObject.FooterStyle,
                                                      referenceObject.CssFooterClass,
                                                      referenceObject.Colspan,
                                                      referenceObject.Rowspan,
                                                      referenceObject.IsFrozen,
                                                      referenceObject.AlignFrozen,
                                                      referenceObject.IsHidden),
                            ExpectedPropertyValue = referenceObject.FilterMode,
                        };

                        return result;
                    },
                    PropertyName = "FilterMode",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<TableColumn>
                {
                    Name = "HeaderText should return same 'headerText' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<TableColumn>();

                        var result = new SystemUnderTestExpectedPropertyValue<TableColumn>
                        {
                            SystemUnderTest = new TableColumn(
                                                      referenceObject.Id,
                                                      referenceObject.DataType,
                                                      referenceObject.IsSortable,
                                                      referenceObject.SortMode,
                                                      referenceObject.IsFilterable,
                                                      referenceObject.FilterMode,
                                                      referenceObject.HeaderText,
                                                      referenceObject.FooterText,
                                                      referenceObject.Style,
                                                      referenceObject.CssClass,
                                                      referenceObject.HeaderStyle,
                                                      referenceObject.CssHeaderClass,
                                                      referenceObject.BodyStyle,
                                                      referenceObject.CssBodyClass,
                                                      referenceObject.FooterStyle,
                                                      referenceObject.CssFooterClass,
                                                      referenceObject.Colspan,
                                                      referenceObject.Rowspan,
                                                      referenceObject.IsFrozen,
                                                      referenceObject.AlignFrozen,
                                                      referenceObject.IsHidden),
                            ExpectedPropertyValue = referenceObject.HeaderText,
                        };

                        return result;
                    },
                    PropertyName = "HeaderText",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<TableColumn>
                {
                    Name = "FooterText should return same 'footerText' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<TableColumn>();

                        var result = new SystemUnderTestExpectedPropertyValue<TableColumn>
                        {
                            SystemUnderTest = new TableColumn(
                                                      referenceObject.Id,
                                                      referenceObject.DataType,
                                                      referenceObject.IsSortable,
                                                      referenceObject.SortMode,
                                                      referenceObject.IsFilterable,
                                                      referenceObject.FilterMode,
                                                      referenceObject.HeaderText,
                                                      referenceObject.FooterText,
                                                      referenceObject.Style,
                                                      referenceObject.CssClass,
                                                      referenceObject.HeaderStyle,
                                                      referenceObject.CssHeaderClass,
                                                      referenceObject.BodyStyle,
                                                      referenceObject.CssBodyClass,
                                                      referenceObject.FooterStyle,
                                                      referenceObject.CssFooterClass,
                                                      referenceObject.Colspan,
                                                      referenceObject.Rowspan,
                                                      referenceObject.IsFrozen,
                                                      referenceObject.AlignFrozen,
                                                      referenceObject.IsHidden),
                            ExpectedPropertyValue = referenceObject.FooterText,
                        };

                        return result;
                    },
                    PropertyName = "FooterText",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<TableColumn>
                {
                    Name = "Style should return same 'style' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<TableColumn>();

                        var result = new SystemUnderTestExpectedPropertyValue<TableColumn>
                        {
                            SystemUnderTest = new TableColumn(
                                                      referenceObject.Id,
                                                      referenceObject.DataType,
                                                      referenceObject.IsSortable,
                                                      referenceObject.SortMode,
                                                      referenceObject.IsFilterable,
                                                      referenceObject.FilterMode,
                                                      referenceObject.HeaderText,
                                                      referenceObject.FooterText,
                                                      referenceObject.Style,
                                                      referenceObject.CssClass,
                                                      referenceObject.HeaderStyle,
                                                      referenceObject.CssHeaderClass,
                                                      referenceObject.BodyStyle,
                                                      referenceObject.CssBodyClass,
                                                      referenceObject.FooterStyle,
                                                      referenceObject.CssFooterClass,
                                                      referenceObject.Colspan,
                                                      referenceObject.Rowspan,
                                                      referenceObject.IsFrozen,
                                                      referenceObject.AlignFrozen,
                                                      referenceObject.IsHidden),
                            ExpectedPropertyValue = referenceObject.Style,
                        };

                        return result;
                    },
                    PropertyName = "Style",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<TableColumn>
                {
                    Name = "CssClass should return same 'cssClass' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<TableColumn>();

                        var result = new SystemUnderTestExpectedPropertyValue<TableColumn>
                        {
                            SystemUnderTest = new TableColumn(
                                                      referenceObject.Id,
                                                      referenceObject.DataType,
                                                      referenceObject.IsSortable,
                                                      referenceObject.SortMode,
                                                      referenceObject.IsFilterable,
                                                      referenceObject.FilterMode,
                                                      referenceObject.HeaderText,
                                                      referenceObject.FooterText,
                                                      referenceObject.Style,
                                                      referenceObject.CssClass,
                                                      referenceObject.HeaderStyle,
                                                      referenceObject.CssHeaderClass,
                                                      referenceObject.BodyStyle,
                                                      referenceObject.CssBodyClass,
                                                      referenceObject.FooterStyle,
                                                      referenceObject.CssFooterClass,
                                                      referenceObject.Colspan,
                                                      referenceObject.Rowspan,
                                                      referenceObject.IsFrozen,
                                                      referenceObject.AlignFrozen,
                                                      referenceObject.IsHidden),
                            ExpectedPropertyValue = referenceObject.CssClass,
                        };

                        return result;
                    },
                    PropertyName = "CssClass",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<TableColumn>
                {
                    Name = "HeaderStyle should return same 'headerStyle' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<TableColumn>();

                        var result = new SystemUnderTestExpectedPropertyValue<TableColumn>
                        {
                            SystemUnderTest = new TableColumn(
                                                      referenceObject.Id,
                                                      referenceObject.DataType,
                                                      referenceObject.IsSortable,
                                                      referenceObject.SortMode,
                                                      referenceObject.IsFilterable,
                                                      referenceObject.FilterMode,
                                                      referenceObject.HeaderText,
                                                      referenceObject.FooterText,
                                                      referenceObject.Style,
                                                      referenceObject.CssClass,
                                                      referenceObject.HeaderStyle,
                                                      referenceObject.CssHeaderClass,
                                                      referenceObject.BodyStyle,
                                                      referenceObject.CssBodyClass,
                                                      referenceObject.FooterStyle,
                                                      referenceObject.CssFooterClass,
                                                      referenceObject.Colspan,
                                                      referenceObject.Rowspan,
                                                      referenceObject.IsFrozen,
                                                      referenceObject.AlignFrozen,
                                                      referenceObject.IsHidden),
                            ExpectedPropertyValue = referenceObject.HeaderStyle,
                        };

                        return result;
                    },
                    PropertyName = "HeaderStyle",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<TableColumn>
                {
                    Name = "CssHeaderClass should return same 'cssHeaderClass' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<TableColumn>();

                        var result = new SystemUnderTestExpectedPropertyValue<TableColumn>
                        {
                            SystemUnderTest = new TableColumn(
                                                      referenceObject.Id,
                                                      referenceObject.DataType,
                                                      referenceObject.IsSortable,
                                                      referenceObject.SortMode,
                                                      referenceObject.IsFilterable,
                                                      referenceObject.FilterMode,
                                                      referenceObject.HeaderText,
                                                      referenceObject.FooterText,
                                                      referenceObject.Style,
                                                      referenceObject.CssClass,
                                                      referenceObject.HeaderStyle,
                                                      referenceObject.CssHeaderClass,
                                                      referenceObject.BodyStyle,
                                                      referenceObject.CssBodyClass,
                                                      referenceObject.FooterStyle,
                                                      referenceObject.CssFooterClass,
                                                      referenceObject.Colspan,
                                                      referenceObject.Rowspan,
                                                      referenceObject.IsFrozen,
                                                      referenceObject.AlignFrozen,
                                                      referenceObject.IsHidden),
                            ExpectedPropertyValue = referenceObject.CssHeaderClass,
                        };

                        return result;
                    },
                    PropertyName = "CssHeaderClass",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<TableColumn>
                {
                    Name = "BodyStyle should return same 'bodyStyle' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<TableColumn>();

                        var result = new SystemUnderTestExpectedPropertyValue<TableColumn>
                        {
                            SystemUnderTest = new TableColumn(
                                                      referenceObject.Id,
                                                      referenceObject.DataType,
                                                      referenceObject.IsSortable,
                                                      referenceObject.SortMode,
                                                      referenceObject.IsFilterable,
                                                      referenceObject.FilterMode,
                                                      referenceObject.HeaderText,
                                                      referenceObject.FooterText,
                                                      referenceObject.Style,
                                                      referenceObject.CssClass,
                                                      referenceObject.HeaderStyle,
                                                      referenceObject.CssHeaderClass,
                                                      referenceObject.BodyStyle,
                                                      referenceObject.CssBodyClass,
                                                      referenceObject.FooterStyle,
                                                      referenceObject.CssFooterClass,
                                                      referenceObject.Colspan,
                                                      referenceObject.Rowspan,
                                                      referenceObject.IsFrozen,
                                                      referenceObject.AlignFrozen,
                                                      referenceObject.IsHidden),
                            ExpectedPropertyValue = referenceObject.BodyStyle,
                        };

                        return result;
                    },
                    PropertyName = "BodyStyle",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<TableColumn>
                {
                    Name = "CssBodyClass should return same 'cssBodyClass' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<TableColumn>();

                        var result = new SystemUnderTestExpectedPropertyValue<TableColumn>
                        {
                            SystemUnderTest = new TableColumn(
                                                      referenceObject.Id,
                                                      referenceObject.DataType,
                                                      referenceObject.IsSortable,
                                                      referenceObject.SortMode,
                                                      referenceObject.IsFilterable,
                                                      referenceObject.FilterMode,
                                                      referenceObject.HeaderText,
                                                      referenceObject.FooterText,
                                                      referenceObject.Style,
                                                      referenceObject.CssClass,
                                                      referenceObject.HeaderStyle,
                                                      referenceObject.CssHeaderClass,
                                                      referenceObject.BodyStyle,
                                                      referenceObject.CssBodyClass,
                                                      referenceObject.FooterStyle,
                                                      referenceObject.CssFooterClass,
                                                      referenceObject.Colspan,
                                                      referenceObject.Rowspan,
                                                      referenceObject.IsFrozen,
                                                      referenceObject.AlignFrozen,
                                                      referenceObject.IsHidden),
                            ExpectedPropertyValue = referenceObject.CssBodyClass,
                        };

                        return result;
                    },
                    PropertyName = "CssBodyClass",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<TableColumn>
                {
                    Name = "FooterStyle should return same 'footerStyle' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<TableColumn>();

                        var result = new SystemUnderTestExpectedPropertyValue<TableColumn>
                        {
                            SystemUnderTest = new TableColumn(
                                                      referenceObject.Id,
                                                      referenceObject.DataType,
                                                      referenceObject.IsSortable,
                                                      referenceObject.SortMode,
                                                      referenceObject.IsFilterable,
                                                      referenceObject.FilterMode,
                                                      referenceObject.HeaderText,
                                                      referenceObject.FooterText,
                                                      referenceObject.Style,
                                                      referenceObject.CssClass,
                                                      referenceObject.HeaderStyle,
                                                      referenceObject.CssHeaderClass,
                                                      referenceObject.BodyStyle,
                                                      referenceObject.CssBodyClass,
                                                      referenceObject.FooterStyle,
                                                      referenceObject.CssFooterClass,
                                                      referenceObject.Colspan,
                                                      referenceObject.Rowspan,
                                                      referenceObject.IsFrozen,
                                                      referenceObject.AlignFrozen,
                                                      referenceObject.IsHidden),
                            ExpectedPropertyValue = referenceObject.FooterStyle,
                        };

                        return result;
                    },
                    PropertyName = "FooterStyle",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<TableColumn>
                {
                    Name = "CssFooterClass should return same 'cssFooterClass' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<TableColumn>();

                        var result = new SystemUnderTestExpectedPropertyValue<TableColumn>
                        {
                            SystemUnderTest = new TableColumn(
                                                      referenceObject.Id,
                                                      referenceObject.DataType,
                                                      referenceObject.IsSortable,
                                                      referenceObject.SortMode,
                                                      referenceObject.IsFilterable,
                                                      referenceObject.FilterMode,
                                                      referenceObject.HeaderText,
                                                      referenceObject.FooterText,
                                                      referenceObject.Style,
                                                      referenceObject.CssClass,
                                                      referenceObject.HeaderStyle,
                                                      referenceObject.CssHeaderClass,
                                                      referenceObject.BodyStyle,
                                                      referenceObject.CssBodyClass,
                                                      referenceObject.FooterStyle,
                                                      referenceObject.CssFooterClass,
                                                      referenceObject.Colspan,
                                                      referenceObject.Rowspan,
                                                      referenceObject.IsFrozen,
                                                      referenceObject.AlignFrozen,
                                                      referenceObject.IsHidden),
                            ExpectedPropertyValue = referenceObject.CssFooterClass,
                        };

                        return result;
                    },
                    PropertyName = "CssFooterClass",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<TableColumn>
                {
                    Name = "Colspan should return same 'colspan' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<TableColumn>();

                        var result = new SystemUnderTestExpectedPropertyValue<TableColumn>
                        {
                            SystemUnderTest = new TableColumn(
                                                      referenceObject.Id,
                                                      referenceObject.DataType,
                                                      referenceObject.IsSortable,
                                                      referenceObject.SortMode,
                                                      referenceObject.IsFilterable,
                                                      referenceObject.FilterMode,
                                                      referenceObject.HeaderText,
                                                      referenceObject.FooterText,
                                                      referenceObject.Style,
                                                      referenceObject.CssClass,
                                                      referenceObject.HeaderStyle,
                                                      referenceObject.CssHeaderClass,
                                                      referenceObject.BodyStyle,
                                                      referenceObject.CssBodyClass,
                                                      referenceObject.FooterStyle,
                                                      referenceObject.CssFooterClass,
                                                      referenceObject.Colspan,
                                                      referenceObject.Rowspan,
                                                      referenceObject.IsFrozen,
                                                      referenceObject.AlignFrozen,
                                                      referenceObject.IsHidden),
                            ExpectedPropertyValue = referenceObject.Colspan,
                        };

                        return result;
                    },
                    PropertyName = "Colspan",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<TableColumn>
                {
                    Name = "Rowspan should return same 'rowspan' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<TableColumn>();

                        var result = new SystemUnderTestExpectedPropertyValue<TableColumn>
                        {
                            SystemUnderTest = new TableColumn(
                                                      referenceObject.Id,
                                                      referenceObject.DataType,
                                                      referenceObject.IsSortable,
                                                      referenceObject.SortMode,
                                                      referenceObject.IsFilterable,
                                                      referenceObject.FilterMode,
                                                      referenceObject.HeaderText,
                                                      referenceObject.FooterText,
                                                      referenceObject.Style,
                                                      referenceObject.CssClass,
                                                      referenceObject.HeaderStyle,
                                                      referenceObject.CssHeaderClass,
                                                      referenceObject.BodyStyle,
                                                      referenceObject.CssBodyClass,
                                                      referenceObject.FooterStyle,
                                                      referenceObject.CssFooterClass,
                                                      referenceObject.Colspan,
                                                      referenceObject.Rowspan,
                                                      referenceObject.IsFrozen,
                                                      referenceObject.AlignFrozen,
                                                      referenceObject.IsHidden),
                            ExpectedPropertyValue = referenceObject.Rowspan,
                        };

                        return result;
                    },
                    PropertyName = "Rowspan",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<TableColumn>
                {
                    Name = "IsFrozen should return same 'isFrozen' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<TableColumn>();

                        var result = new SystemUnderTestExpectedPropertyValue<TableColumn>
                        {
                            SystemUnderTest = new TableColumn(
                                                      referenceObject.Id,
                                                      referenceObject.DataType,
                                                      referenceObject.IsSortable,
                                                      referenceObject.SortMode,
                                                      referenceObject.IsFilterable,
                                                      referenceObject.FilterMode,
                                                      referenceObject.HeaderText,
                                                      referenceObject.FooterText,
                                                      referenceObject.Style,
                                                      referenceObject.CssClass,
                                                      referenceObject.HeaderStyle,
                                                      referenceObject.CssHeaderClass,
                                                      referenceObject.BodyStyle,
                                                      referenceObject.CssBodyClass,
                                                      referenceObject.FooterStyle,
                                                      referenceObject.CssFooterClass,
                                                      referenceObject.Colspan,
                                                      referenceObject.Rowspan,
                                                      referenceObject.IsFrozen,
                                                      referenceObject.AlignFrozen,
                                                      referenceObject.IsHidden),
                            ExpectedPropertyValue = referenceObject.IsFrozen,
                        };

                        return result;
                    },
                    PropertyName = "IsFrozen",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<TableColumn>
                {
                    Name = "AlignFrozen should return same 'alignFrozen' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<TableColumn>();

                        var result = new SystemUnderTestExpectedPropertyValue<TableColumn>
                        {
                            SystemUnderTest = new TableColumn(
                                                      referenceObject.Id,
                                                      referenceObject.DataType,
                                                      referenceObject.IsSortable,
                                                      referenceObject.SortMode,
                                                      referenceObject.IsFilterable,
                                                      referenceObject.FilterMode,
                                                      referenceObject.HeaderText,
                                                      referenceObject.FooterText,
                                                      referenceObject.Style,
                                                      referenceObject.CssClass,
                                                      referenceObject.HeaderStyle,
                                                      referenceObject.CssHeaderClass,
                                                      referenceObject.BodyStyle,
                                                      referenceObject.CssBodyClass,
                                                      referenceObject.FooterStyle,
                                                      referenceObject.CssFooterClass,
                                                      referenceObject.Colspan,
                                                      referenceObject.Rowspan,
                                                      referenceObject.IsFrozen,
                                                      referenceObject.AlignFrozen,
                                                      referenceObject.IsHidden),
                            ExpectedPropertyValue = referenceObject.AlignFrozen,
                        };

                        return result;
                    },
                    PropertyName = "AlignFrozen",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<TableColumn>
                {
                    Name = "IsHidden should return same 'isHidden' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<TableColumn>();

                        var result = new SystemUnderTestExpectedPropertyValue<TableColumn>
                        {
                            SystemUnderTest = new TableColumn(
                                                      referenceObject.Id,
                                                      referenceObject.DataType,
                                                      referenceObject.IsSortable,
                                                      referenceObject.SortMode,
                                                      referenceObject.IsFilterable,
                                                      referenceObject.FilterMode,
                                                      referenceObject.HeaderText,
                                                      referenceObject.FooterText,
                                                      referenceObject.Style,
                                                      referenceObject.CssClass,
                                                      referenceObject.HeaderStyle,
                                                      referenceObject.CssHeaderClass,
                                                      referenceObject.BodyStyle,
                                                      referenceObject.CssBodyClass,
                                                      referenceObject.FooterStyle,
                                                      referenceObject.CssFooterClass,
                                                      referenceObject.Colspan,
                                                      referenceObject.Rowspan,
                                                      referenceObject.IsFrozen,
                                                      referenceObject.AlignFrozen,
                                                      referenceObject.IsHidden),
                            ExpectedPropertyValue = referenceObject.IsHidden,
                        };

                        return result;
                    },
                    PropertyName = "IsHidden",
                });

        private static readonly DeepCloneWithTestScenarios<TableColumn> DeepCloneWithTestScenarios = new DeepCloneWithTestScenarios<TableColumn>()
            .AddScenario(() =>
                new DeepCloneWithTestScenario<TableColumn>
                {
                    Name = "DeepCloneWithId should deep clone object and replace Id with the provided id",
                    WithPropertyName = "Id",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<TableColumn>();

                        var referenceObject = A.Dummy<TableColumn>().ThatIs(_ => !systemUnderTest.Id.IsEqualTo(_.Id));

                        var result = new SystemUnderTestDeepCloneWithValue<TableColumn>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Id,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<TableColumn>
                {
                    Name = "DeepCloneWithDataType should deep clone object and replace DataType with the provided dataType",
                    WithPropertyName = "DataType",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<TableColumn>();

                        var referenceObject = A.Dummy<TableColumn>().ThatIs(_ => !systemUnderTest.DataType.IsEqualTo(_.DataType));

                        var result = new SystemUnderTestDeepCloneWithValue<TableColumn>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.DataType,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<TableColumn>
                {
                    Name = "DeepCloneWithIsSortable should deep clone object and replace IsSortable with the provided isSortable",
                    WithPropertyName = "IsSortable",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<TableColumn>();

                        var referenceObject = A.Dummy<TableColumn>().ThatIs(_ => !systemUnderTest.IsSortable.IsEqualTo(_.IsSortable));

                        var result = new SystemUnderTestDeepCloneWithValue<TableColumn>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.IsSortable,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<TableColumn>
                {
                    Name = "DeepCloneWithSortMode should deep clone object and replace SortMode with the provided sortMode",
                    WithPropertyName = "SortMode",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<TableColumn>();

                        var referenceObject = A.Dummy<TableColumn>().ThatIs(_ => !systemUnderTest.SortMode.IsEqualTo(_.SortMode));

                        var result = new SystemUnderTestDeepCloneWithValue<TableColumn>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.SortMode,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<TableColumn>
                {
                    Name = "DeepCloneWithIsFilterable should deep clone object and replace IsFilterable with the provided isFilterable",
                    WithPropertyName = "IsFilterable",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<TableColumn>();

                        var referenceObject = A.Dummy<TableColumn>().ThatIs(_ => !systemUnderTest.IsFilterable.IsEqualTo(_.IsFilterable));

                        var result = new SystemUnderTestDeepCloneWithValue<TableColumn>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.IsFilterable,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<TableColumn>
                {
                    Name = "DeepCloneWithFilterMode should deep clone object and replace FilterMode with the provided filterMode",
                    WithPropertyName = "FilterMode",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<TableColumn>();

                        var referenceObject = A.Dummy<TableColumn>().ThatIs(_ => !systemUnderTest.FilterMode.IsEqualTo(_.FilterMode));

                        var result = new SystemUnderTestDeepCloneWithValue<TableColumn>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.FilterMode,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<TableColumn>
                {
                    Name = "DeepCloneWithHeaderText should deep clone object and replace HeaderText with the provided headerText",
                    WithPropertyName = "HeaderText",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<TableColumn>();

                        var referenceObject = A.Dummy<TableColumn>().ThatIs(_ => !systemUnderTest.HeaderText.IsEqualTo(_.HeaderText));

                        var result = new SystemUnderTestDeepCloneWithValue<TableColumn>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.HeaderText,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<TableColumn>
                {
                    Name = "DeepCloneWithFooterText should deep clone object and replace FooterText with the provided footerText",
                    WithPropertyName = "FooterText",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<TableColumn>();

                        var referenceObject = A.Dummy<TableColumn>().ThatIs(_ => !systemUnderTest.FooterText.IsEqualTo(_.FooterText));

                        var result = new SystemUnderTestDeepCloneWithValue<TableColumn>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.FooterText,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<TableColumn>
                {
                    Name = "DeepCloneWithStyle should deep clone object and replace Style with the provided style",
                    WithPropertyName = "Style",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<TableColumn>();

                        var referenceObject = A.Dummy<TableColumn>().ThatIs(_ => !systemUnderTest.Style.IsEqualTo(_.Style));

                        var result = new SystemUnderTestDeepCloneWithValue<TableColumn>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Style,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<TableColumn>
                {
                    Name = "DeepCloneWithCssClass should deep clone object and replace CssClass with the provided cssClass",
                    WithPropertyName = "CssClass",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<TableColumn>();

                        var referenceObject = A.Dummy<TableColumn>().ThatIs(_ => !systemUnderTest.CssClass.IsEqualTo(_.CssClass));

                        var result = new SystemUnderTestDeepCloneWithValue<TableColumn>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.CssClass,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<TableColumn>
                {
                    Name = "DeepCloneWithHeaderStyle should deep clone object and replace HeaderStyle with the provided headerStyle",
                    WithPropertyName = "HeaderStyle",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<TableColumn>();

                        var referenceObject = A.Dummy<TableColumn>().ThatIs(_ => !systemUnderTest.HeaderStyle.IsEqualTo(_.HeaderStyle));

                        var result = new SystemUnderTestDeepCloneWithValue<TableColumn>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.HeaderStyle,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<TableColumn>
                {
                    Name = "DeepCloneWithCssHeaderClass should deep clone object and replace CssHeaderClass with the provided cssHeaderClass",
                    WithPropertyName = "CssHeaderClass",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<TableColumn>();

                        var referenceObject = A.Dummy<TableColumn>().ThatIs(_ => !systemUnderTest.CssHeaderClass.IsEqualTo(_.CssHeaderClass));

                        var result = new SystemUnderTestDeepCloneWithValue<TableColumn>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.CssHeaderClass,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<TableColumn>
                {
                    Name = "DeepCloneWithBodyStyle should deep clone object and replace BodyStyle with the provided bodyStyle",
                    WithPropertyName = "BodyStyle",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<TableColumn>();

                        var referenceObject = A.Dummy<TableColumn>().ThatIs(_ => !systemUnderTest.BodyStyle.IsEqualTo(_.BodyStyle));

                        var result = new SystemUnderTestDeepCloneWithValue<TableColumn>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.BodyStyle,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<TableColumn>
                {
                    Name = "DeepCloneWithCssBodyClass should deep clone object and replace CssBodyClass with the provided cssBodyClass",
                    WithPropertyName = "CssBodyClass",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<TableColumn>();

                        var referenceObject = A.Dummy<TableColumn>().ThatIs(_ => !systemUnderTest.CssBodyClass.IsEqualTo(_.CssBodyClass));

                        var result = new SystemUnderTestDeepCloneWithValue<TableColumn>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.CssBodyClass,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<TableColumn>
                {
                    Name = "DeepCloneWithFooterStyle should deep clone object and replace FooterStyle with the provided footerStyle",
                    WithPropertyName = "FooterStyle",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<TableColumn>();

                        var referenceObject = A.Dummy<TableColumn>().ThatIs(_ => !systemUnderTest.FooterStyle.IsEqualTo(_.FooterStyle));

                        var result = new SystemUnderTestDeepCloneWithValue<TableColumn>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.FooterStyle,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<TableColumn>
                {
                    Name = "DeepCloneWithCssFooterClass should deep clone object and replace CssFooterClass with the provided cssFooterClass",
                    WithPropertyName = "CssFooterClass",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<TableColumn>();

                        var referenceObject = A.Dummy<TableColumn>().ThatIs(_ => !systemUnderTest.CssFooterClass.IsEqualTo(_.CssFooterClass));

                        var result = new SystemUnderTestDeepCloneWithValue<TableColumn>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.CssFooterClass,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<TableColumn>
                {
                    Name = "DeepCloneWithColspan should deep clone object and replace Colspan with the provided colspan",
                    WithPropertyName = "Colspan",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<TableColumn>();

                        var referenceObject = A.Dummy<TableColumn>().ThatIs(_ => !systemUnderTest.Colspan.IsEqualTo(_.Colspan));

                        var result = new SystemUnderTestDeepCloneWithValue<TableColumn>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Colspan,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<TableColumn>
                {
                    Name = "DeepCloneWithRowspan should deep clone object and replace Rowspan with the provided rowspan",
                    WithPropertyName = "Rowspan",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<TableColumn>();

                        var referenceObject = A.Dummy<TableColumn>().ThatIs(_ => !systemUnderTest.Rowspan.IsEqualTo(_.Rowspan));

                        var result = new SystemUnderTestDeepCloneWithValue<TableColumn>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Rowspan,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<TableColumn>
                {
                    Name = "DeepCloneWithIsFrozen should deep clone object and replace IsFrozen with the provided isFrozen",
                    WithPropertyName = "IsFrozen",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<TableColumn>();

                        var referenceObject = A.Dummy<TableColumn>().ThatIs(_ => !systemUnderTest.IsFrozen.IsEqualTo(_.IsFrozen));

                        var result = new SystemUnderTestDeepCloneWithValue<TableColumn>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.IsFrozen,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<TableColumn>
                {
                    Name = "DeepCloneWithAlignFrozen should deep clone object and replace AlignFrozen with the provided alignFrozen",
                    WithPropertyName = "AlignFrozen",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<TableColumn>();

                        var referenceObject = A.Dummy<TableColumn>().ThatIs(_ => !systemUnderTest.AlignFrozen.IsEqualTo(_.AlignFrozen));

                        var result = new SystemUnderTestDeepCloneWithValue<TableColumn>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.AlignFrozen,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<TableColumn>
                {
                    Name = "DeepCloneWithIsHidden should deep clone object and replace IsHidden with the provided isHidden",
                    WithPropertyName = "IsHidden",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<TableColumn>();

                        var referenceObject = A.Dummy<TableColumn>().ThatIs(_ => !systemUnderTest.IsHidden.IsEqualTo(_.IsHidden));

                        var result = new SystemUnderTestDeepCloneWithValue<TableColumn>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.IsHidden,
                        };

                        return result;
                    },
                });

        private static readonly TableColumn ReferenceObjectForEquatableTestScenarios = A.Dummy<TableColumn>();

        private static readonly EquatableTestScenarios<TableColumn> EquatableTestScenarios = new EquatableTestScenarios<TableColumn>()
            .AddScenario(() =>
                new EquatableTestScenario<TableColumn>
                {
                    Name = "Default Code Generated Scenario",
                    ReferenceObject = ReferenceObjectForEquatableTestScenarios,
                    ObjectsThatAreEqualToButNotTheSameAsReferenceObject = new TableColumn[]
                    {
                        new TableColumn(
                                ReferenceObjectForEquatableTestScenarios.Id,
                                ReferenceObjectForEquatableTestScenarios.DataType,
                                ReferenceObjectForEquatableTestScenarios.IsSortable,
                                ReferenceObjectForEquatableTestScenarios.SortMode,
                                ReferenceObjectForEquatableTestScenarios.IsFilterable,
                                ReferenceObjectForEquatableTestScenarios.FilterMode,
                                ReferenceObjectForEquatableTestScenarios.HeaderText,
                                ReferenceObjectForEquatableTestScenarios.FooterText,
                                ReferenceObjectForEquatableTestScenarios.Style,
                                ReferenceObjectForEquatableTestScenarios.CssClass,
                                ReferenceObjectForEquatableTestScenarios.HeaderStyle,
                                ReferenceObjectForEquatableTestScenarios.CssHeaderClass,
                                ReferenceObjectForEquatableTestScenarios.BodyStyle,
                                ReferenceObjectForEquatableTestScenarios.CssBodyClass,
                                ReferenceObjectForEquatableTestScenarios.FooterStyle,
                                ReferenceObjectForEquatableTestScenarios.CssFooterClass,
                                ReferenceObjectForEquatableTestScenarios.Colspan,
                                ReferenceObjectForEquatableTestScenarios.Rowspan,
                                ReferenceObjectForEquatableTestScenarios.IsFrozen,
                                ReferenceObjectForEquatableTestScenarios.AlignFrozen,
                                ReferenceObjectForEquatableTestScenarios.IsHidden),
                    },
                    ObjectsThatAreNotEqualToReferenceObject = new TableColumn[]
                    {
                        new TableColumn(
                                A.Dummy<TableColumn>().Whose(_ => !_.Id.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Id)).Id,
                                ReferenceObjectForEquatableTestScenarios.DataType,
                                ReferenceObjectForEquatableTestScenarios.IsSortable,
                                ReferenceObjectForEquatableTestScenarios.SortMode,
                                ReferenceObjectForEquatableTestScenarios.IsFilterable,
                                ReferenceObjectForEquatableTestScenarios.FilterMode,
                                ReferenceObjectForEquatableTestScenarios.HeaderText,
                                ReferenceObjectForEquatableTestScenarios.FooterText,
                                ReferenceObjectForEquatableTestScenarios.Style,
                                ReferenceObjectForEquatableTestScenarios.CssClass,
                                ReferenceObjectForEquatableTestScenarios.HeaderStyle,
                                ReferenceObjectForEquatableTestScenarios.CssHeaderClass,
                                ReferenceObjectForEquatableTestScenarios.BodyStyle,
                                ReferenceObjectForEquatableTestScenarios.CssBodyClass,
                                ReferenceObjectForEquatableTestScenarios.FooterStyle,
                                ReferenceObjectForEquatableTestScenarios.CssFooterClass,
                                ReferenceObjectForEquatableTestScenarios.Colspan,
                                ReferenceObjectForEquatableTestScenarios.Rowspan,
                                ReferenceObjectForEquatableTestScenarios.IsFrozen,
                                ReferenceObjectForEquatableTestScenarios.AlignFrozen,
                                ReferenceObjectForEquatableTestScenarios.IsHidden),
                        new TableColumn(
                                ReferenceObjectForEquatableTestScenarios.Id,
                                A.Dummy<TableColumn>().Whose(_ => !_.DataType.IsEqualTo(ReferenceObjectForEquatableTestScenarios.DataType)).DataType,
                                ReferenceObjectForEquatableTestScenarios.IsSortable,
                                ReferenceObjectForEquatableTestScenarios.SortMode,
                                ReferenceObjectForEquatableTestScenarios.IsFilterable,
                                ReferenceObjectForEquatableTestScenarios.FilterMode,
                                ReferenceObjectForEquatableTestScenarios.HeaderText,
                                ReferenceObjectForEquatableTestScenarios.FooterText,
                                ReferenceObjectForEquatableTestScenarios.Style,
                                ReferenceObjectForEquatableTestScenarios.CssClass,
                                ReferenceObjectForEquatableTestScenarios.HeaderStyle,
                                ReferenceObjectForEquatableTestScenarios.CssHeaderClass,
                                ReferenceObjectForEquatableTestScenarios.BodyStyle,
                                ReferenceObjectForEquatableTestScenarios.CssBodyClass,
                                ReferenceObjectForEquatableTestScenarios.FooterStyle,
                                ReferenceObjectForEquatableTestScenarios.CssFooterClass,
                                ReferenceObjectForEquatableTestScenarios.Colspan,
                                ReferenceObjectForEquatableTestScenarios.Rowspan,
                                ReferenceObjectForEquatableTestScenarios.IsFrozen,
                                ReferenceObjectForEquatableTestScenarios.AlignFrozen,
                                ReferenceObjectForEquatableTestScenarios.IsHidden),
                        new TableColumn(
                                ReferenceObjectForEquatableTestScenarios.Id,
                                ReferenceObjectForEquatableTestScenarios.DataType,
                                A.Dummy<TableColumn>().Whose(_ => !_.IsSortable.IsEqualTo(ReferenceObjectForEquatableTestScenarios.IsSortable)).IsSortable,
                                ReferenceObjectForEquatableTestScenarios.SortMode,
                                ReferenceObjectForEquatableTestScenarios.IsFilterable,
                                ReferenceObjectForEquatableTestScenarios.FilterMode,
                                ReferenceObjectForEquatableTestScenarios.HeaderText,
                                ReferenceObjectForEquatableTestScenarios.FooterText,
                                ReferenceObjectForEquatableTestScenarios.Style,
                                ReferenceObjectForEquatableTestScenarios.CssClass,
                                ReferenceObjectForEquatableTestScenarios.HeaderStyle,
                                ReferenceObjectForEquatableTestScenarios.CssHeaderClass,
                                ReferenceObjectForEquatableTestScenarios.BodyStyle,
                                ReferenceObjectForEquatableTestScenarios.CssBodyClass,
                                ReferenceObjectForEquatableTestScenarios.FooterStyle,
                                ReferenceObjectForEquatableTestScenarios.CssFooterClass,
                                ReferenceObjectForEquatableTestScenarios.Colspan,
                                ReferenceObjectForEquatableTestScenarios.Rowspan,
                                ReferenceObjectForEquatableTestScenarios.IsFrozen,
                                ReferenceObjectForEquatableTestScenarios.AlignFrozen,
                                ReferenceObjectForEquatableTestScenarios.IsHidden),
                        new TableColumn(
                                ReferenceObjectForEquatableTestScenarios.Id,
                                ReferenceObjectForEquatableTestScenarios.DataType,
                                ReferenceObjectForEquatableTestScenarios.IsSortable,
                                A.Dummy<TableColumn>().Whose(_ => !_.SortMode.IsEqualTo(ReferenceObjectForEquatableTestScenarios.SortMode)).SortMode,
                                ReferenceObjectForEquatableTestScenarios.IsFilterable,
                                ReferenceObjectForEquatableTestScenarios.FilterMode,
                                ReferenceObjectForEquatableTestScenarios.HeaderText,
                                ReferenceObjectForEquatableTestScenarios.FooterText,
                                ReferenceObjectForEquatableTestScenarios.Style,
                                ReferenceObjectForEquatableTestScenarios.CssClass,
                                ReferenceObjectForEquatableTestScenarios.HeaderStyle,
                                ReferenceObjectForEquatableTestScenarios.CssHeaderClass,
                                ReferenceObjectForEquatableTestScenarios.BodyStyle,
                                ReferenceObjectForEquatableTestScenarios.CssBodyClass,
                                ReferenceObjectForEquatableTestScenarios.FooterStyle,
                                ReferenceObjectForEquatableTestScenarios.CssFooterClass,
                                ReferenceObjectForEquatableTestScenarios.Colspan,
                                ReferenceObjectForEquatableTestScenarios.Rowspan,
                                ReferenceObjectForEquatableTestScenarios.IsFrozen,
                                ReferenceObjectForEquatableTestScenarios.AlignFrozen,
                                ReferenceObjectForEquatableTestScenarios.IsHidden),
                        new TableColumn(
                                ReferenceObjectForEquatableTestScenarios.Id,
                                ReferenceObjectForEquatableTestScenarios.DataType,
                                ReferenceObjectForEquatableTestScenarios.IsSortable,
                                ReferenceObjectForEquatableTestScenarios.SortMode,
                                A.Dummy<TableColumn>().Whose(_ => !_.IsFilterable.IsEqualTo(ReferenceObjectForEquatableTestScenarios.IsFilterable)).IsFilterable,
                                ReferenceObjectForEquatableTestScenarios.FilterMode,
                                ReferenceObjectForEquatableTestScenarios.HeaderText,
                                ReferenceObjectForEquatableTestScenarios.FooterText,
                                ReferenceObjectForEquatableTestScenarios.Style,
                                ReferenceObjectForEquatableTestScenarios.CssClass,
                                ReferenceObjectForEquatableTestScenarios.HeaderStyle,
                                ReferenceObjectForEquatableTestScenarios.CssHeaderClass,
                                ReferenceObjectForEquatableTestScenarios.BodyStyle,
                                ReferenceObjectForEquatableTestScenarios.CssBodyClass,
                                ReferenceObjectForEquatableTestScenarios.FooterStyle,
                                ReferenceObjectForEquatableTestScenarios.CssFooterClass,
                                ReferenceObjectForEquatableTestScenarios.Colspan,
                                ReferenceObjectForEquatableTestScenarios.Rowspan,
                                ReferenceObjectForEquatableTestScenarios.IsFrozen,
                                ReferenceObjectForEquatableTestScenarios.AlignFrozen,
                                ReferenceObjectForEquatableTestScenarios.IsHidden),
                        new TableColumn(
                                ReferenceObjectForEquatableTestScenarios.Id,
                                ReferenceObjectForEquatableTestScenarios.DataType,
                                ReferenceObjectForEquatableTestScenarios.IsSortable,
                                ReferenceObjectForEquatableTestScenarios.SortMode,
                                ReferenceObjectForEquatableTestScenarios.IsFilterable,
                                A.Dummy<TableColumn>().Whose(_ => !_.FilterMode.IsEqualTo(ReferenceObjectForEquatableTestScenarios.FilterMode)).FilterMode,
                                ReferenceObjectForEquatableTestScenarios.HeaderText,
                                ReferenceObjectForEquatableTestScenarios.FooterText,
                                ReferenceObjectForEquatableTestScenarios.Style,
                                ReferenceObjectForEquatableTestScenarios.CssClass,
                                ReferenceObjectForEquatableTestScenarios.HeaderStyle,
                                ReferenceObjectForEquatableTestScenarios.CssHeaderClass,
                                ReferenceObjectForEquatableTestScenarios.BodyStyle,
                                ReferenceObjectForEquatableTestScenarios.CssBodyClass,
                                ReferenceObjectForEquatableTestScenarios.FooterStyle,
                                ReferenceObjectForEquatableTestScenarios.CssFooterClass,
                                ReferenceObjectForEquatableTestScenarios.Colspan,
                                ReferenceObjectForEquatableTestScenarios.Rowspan,
                                ReferenceObjectForEquatableTestScenarios.IsFrozen,
                                ReferenceObjectForEquatableTestScenarios.AlignFrozen,
                                ReferenceObjectForEquatableTestScenarios.IsHidden),
                        new TableColumn(
                                ReferenceObjectForEquatableTestScenarios.Id,
                                ReferenceObjectForEquatableTestScenarios.DataType,
                                ReferenceObjectForEquatableTestScenarios.IsSortable,
                                ReferenceObjectForEquatableTestScenarios.SortMode,
                                ReferenceObjectForEquatableTestScenarios.IsFilterable,
                                ReferenceObjectForEquatableTestScenarios.FilterMode,
                                A.Dummy<TableColumn>().Whose(_ => !_.HeaderText.IsEqualTo(ReferenceObjectForEquatableTestScenarios.HeaderText)).HeaderText,
                                ReferenceObjectForEquatableTestScenarios.FooterText,
                                ReferenceObjectForEquatableTestScenarios.Style,
                                ReferenceObjectForEquatableTestScenarios.CssClass,
                                ReferenceObjectForEquatableTestScenarios.HeaderStyle,
                                ReferenceObjectForEquatableTestScenarios.CssHeaderClass,
                                ReferenceObjectForEquatableTestScenarios.BodyStyle,
                                ReferenceObjectForEquatableTestScenarios.CssBodyClass,
                                ReferenceObjectForEquatableTestScenarios.FooterStyle,
                                ReferenceObjectForEquatableTestScenarios.CssFooterClass,
                                ReferenceObjectForEquatableTestScenarios.Colspan,
                                ReferenceObjectForEquatableTestScenarios.Rowspan,
                                ReferenceObjectForEquatableTestScenarios.IsFrozen,
                                ReferenceObjectForEquatableTestScenarios.AlignFrozen,
                                ReferenceObjectForEquatableTestScenarios.IsHidden),
                        new TableColumn(
                                ReferenceObjectForEquatableTestScenarios.Id,
                                ReferenceObjectForEquatableTestScenarios.DataType,
                                ReferenceObjectForEquatableTestScenarios.IsSortable,
                                ReferenceObjectForEquatableTestScenarios.SortMode,
                                ReferenceObjectForEquatableTestScenarios.IsFilterable,
                                ReferenceObjectForEquatableTestScenarios.FilterMode,
                                ReferenceObjectForEquatableTestScenarios.HeaderText,
                                A.Dummy<TableColumn>().Whose(_ => !_.FooterText.IsEqualTo(ReferenceObjectForEquatableTestScenarios.FooterText)).FooterText,
                                ReferenceObjectForEquatableTestScenarios.Style,
                                ReferenceObjectForEquatableTestScenarios.CssClass,
                                ReferenceObjectForEquatableTestScenarios.HeaderStyle,
                                ReferenceObjectForEquatableTestScenarios.CssHeaderClass,
                                ReferenceObjectForEquatableTestScenarios.BodyStyle,
                                ReferenceObjectForEquatableTestScenarios.CssBodyClass,
                                ReferenceObjectForEquatableTestScenarios.FooterStyle,
                                ReferenceObjectForEquatableTestScenarios.CssFooterClass,
                                ReferenceObjectForEquatableTestScenarios.Colspan,
                                ReferenceObjectForEquatableTestScenarios.Rowspan,
                                ReferenceObjectForEquatableTestScenarios.IsFrozen,
                                ReferenceObjectForEquatableTestScenarios.AlignFrozen,
                                ReferenceObjectForEquatableTestScenarios.IsHidden),
                        new TableColumn(
                                ReferenceObjectForEquatableTestScenarios.Id,
                                ReferenceObjectForEquatableTestScenarios.DataType,
                                ReferenceObjectForEquatableTestScenarios.IsSortable,
                                ReferenceObjectForEquatableTestScenarios.SortMode,
                                ReferenceObjectForEquatableTestScenarios.IsFilterable,
                                ReferenceObjectForEquatableTestScenarios.FilterMode,
                                ReferenceObjectForEquatableTestScenarios.HeaderText,
                                ReferenceObjectForEquatableTestScenarios.FooterText,
                                A.Dummy<TableColumn>().Whose(_ => !_.Style.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Style)).Style,
                                ReferenceObjectForEquatableTestScenarios.CssClass,
                                ReferenceObjectForEquatableTestScenarios.HeaderStyle,
                                ReferenceObjectForEquatableTestScenarios.CssHeaderClass,
                                ReferenceObjectForEquatableTestScenarios.BodyStyle,
                                ReferenceObjectForEquatableTestScenarios.CssBodyClass,
                                ReferenceObjectForEquatableTestScenarios.FooterStyle,
                                ReferenceObjectForEquatableTestScenarios.CssFooterClass,
                                ReferenceObjectForEquatableTestScenarios.Colspan,
                                ReferenceObjectForEquatableTestScenarios.Rowspan,
                                ReferenceObjectForEquatableTestScenarios.IsFrozen,
                                ReferenceObjectForEquatableTestScenarios.AlignFrozen,
                                ReferenceObjectForEquatableTestScenarios.IsHidden),
                        new TableColumn(
                                ReferenceObjectForEquatableTestScenarios.Id,
                                ReferenceObjectForEquatableTestScenarios.DataType,
                                ReferenceObjectForEquatableTestScenarios.IsSortable,
                                ReferenceObjectForEquatableTestScenarios.SortMode,
                                ReferenceObjectForEquatableTestScenarios.IsFilterable,
                                ReferenceObjectForEquatableTestScenarios.FilterMode,
                                ReferenceObjectForEquatableTestScenarios.HeaderText,
                                ReferenceObjectForEquatableTestScenarios.FooterText,
                                ReferenceObjectForEquatableTestScenarios.Style,
                                A.Dummy<TableColumn>().Whose(_ => !_.CssClass.IsEqualTo(ReferenceObjectForEquatableTestScenarios.CssClass)).CssClass,
                                ReferenceObjectForEquatableTestScenarios.HeaderStyle,
                                ReferenceObjectForEquatableTestScenarios.CssHeaderClass,
                                ReferenceObjectForEquatableTestScenarios.BodyStyle,
                                ReferenceObjectForEquatableTestScenarios.CssBodyClass,
                                ReferenceObjectForEquatableTestScenarios.FooterStyle,
                                ReferenceObjectForEquatableTestScenarios.CssFooterClass,
                                ReferenceObjectForEquatableTestScenarios.Colspan,
                                ReferenceObjectForEquatableTestScenarios.Rowspan,
                                ReferenceObjectForEquatableTestScenarios.IsFrozen,
                                ReferenceObjectForEquatableTestScenarios.AlignFrozen,
                                ReferenceObjectForEquatableTestScenarios.IsHidden),
                        new TableColumn(
                                ReferenceObjectForEquatableTestScenarios.Id,
                                ReferenceObjectForEquatableTestScenarios.DataType,
                                ReferenceObjectForEquatableTestScenarios.IsSortable,
                                ReferenceObjectForEquatableTestScenarios.SortMode,
                                ReferenceObjectForEquatableTestScenarios.IsFilterable,
                                ReferenceObjectForEquatableTestScenarios.FilterMode,
                                ReferenceObjectForEquatableTestScenarios.HeaderText,
                                ReferenceObjectForEquatableTestScenarios.FooterText,
                                ReferenceObjectForEquatableTestScenarios.Style,
                                ReferenceObjectForEquatableTestScenarios.CssClass,
                                A.Dummy<TableColumn>().Whose(_ => !_.HeaderStyle.IsEqualTo(ReferenceObjectForEquatableTestScenarios.HeaderStyle)).HeaderStyle,
                                ReferenceObjectForEquatableTestScenarios.CssHeaderClass,
                                ReferenceObjectForEquatableTestScenarios.BodyStyle,
                                ReferenceObjectForEquatableTestScenarios.CssBodyClass,
                                ReferenceObjectForEquatableTestScenarios.FooterStyle,
                                ReferenceObjectForEquatableTestScenarios.CssFooterClass,
                                ReferenceObjectForEquatableTestScenarios.Colspan,
                                ReferenceObjectForEquatableTestScenarios.Rowspan,
                                ReferenceObjectForEquatableTestScenarios.IsFrozen,
                                ReferenceObjectForEquatableTestScenarios.AlignFrozen,
                                ReferenceObjectForEquatableTestScenarios.IsHidden),
                        new TableColumn(
                                ReferenceObjectForEquatableTestScenarios.Id,
                                ReferenceObjectForEquatableTestScenarios.DataType,
                                ReferenceObjectForEquatableTestScenarios.IsSortable,
                                ReferenceObjectForEquatableTestScenarios.SortMode,
                                ReferenceObjectForEquatableTestScenarios.IsFilterable,
                                ReferenceObjectForEquatableTestScenarios.FilterMode,
                                ReferenceObjectForEquatableTestScenarios.HeaderText,
                                ReferenceObjectForEquatableTestScenarios.FooterText,
                                ReferenceObjectForEquatableTestScenarios.Style,
                                ReferenceObjectForEquatableTestScenarios.CssClass,
                                ReferenceObjectForEquatableTestScenarios.HeaderStyle,
                                A.Dummy<TableColumn>().Whose(_ => !_.CssHeaderClass.IsEqualTo(ReferenceObjectForEquatableTestScenarios.CssHeaderClass)).CssHeaderClass,
                                ReferenceObjectForEquatableTestScenarios.BodyStyle,
                                ReferenceObjectForEquatableTestScenarios.CssBodyClass,
                                ReferenceObjectForEquatableTestScenarios.FooterStyle,
                                ReferenceObjectForEquatableTestScenarios.CssFooterClass,
                                ReferenceObjectForEquatableTestScenarios.Colspan,
                                ReferenceObjectForEquatableTestScenarios.Rowspan,
                                ReferenceObjectForEquatableTestScenarios.IsFrozen,
                                ReferenceObjectForEquatableTestScenarios.AlignFrozen,
                                ReferenceObjectForEquatableTestScenarios.IsHidden),
                        new TableColumn(
                                ReferenceObjectForEquatableTestScenarios.Id,
                                ReferenceObjectForEquatableTestScenarios.DataType,
                                ReferenceObjectForEquatableTestScenarios.IsSortable,
                                ReferenceObjectForEquatableTestScenarios.SortMode,
                                ReferenceObjectForEquatableTestScenarios.IsFilterable,
                                ReferenceObjectForEquatableTestScenarios.FilterMode,
                                ReferenceObjectForEquatableTestScenarios.HeaderText,
                                ReferenceObjectForEquatableTestScenarios.FooterText,
                                ReferenceObjectForEquatableTestScenarios.Style,
                                ReferenceObjectForEquatableTestScenarios.CssClass,
                                ReferenceObjectForEquatableTestScenarios.HeaderStyle,
                                ReferenceObjectForEquatableTestScenarios.CssHeaderClass,
                                A.Dummy<TableColumn>().Whose(_ => !_.BodyStyle.IsEqualTo(ReferenceObjectForEquatableTestScenarios.BodyStyle)).BodyStyle,
                                ReferenceObjectForEquatableTestScenarios.CssBodyClass,
                                ReferenceObjectForEquatableTestScenarios.FooterStyle,
                                ReferenceObjectForEquatableTestScenarios.CssFooterClass,
                                ReferenceObjectForEquatableTestScenarios.Colspan,
                                ReferenceObjectForEquatableTestScenarios.Rowspan,
                                ReferenceObjectForEquatableTestScenarios.IsFrozen,
                                ReferenceObjectForEquatableTestScenarios.AlignFrozen,
                                ReferenceObjectForEquatableTestScenarios.IsHidden),
                        new TableColumn(
                                ReferenceObjectForEquatableTestScenarios.Id,
                                ReferenceObjectForEquatableTestScenarios.DataType,
                                ReferenceObjectForEquatableTestScenarios.IsSortable,
                                ReferenceObjectForEquatableTestScenarios.SortMode,
                                ReferenceObjectForEquatableTestScenarios.IsFilterable,
                                ReferenceObjectForEquatableTestScenarios.FilterMode,
                                ReferenceObjectForEquatableTestScenarios.HeaderText,
                                ReferenceObjectForEquatableTestScenarios.FooterText,
                                ReferenceObjectForEquatableTestScenarios.Style,
                                ReferenceObjectForEquatableTestScenarios.CssClass,
                                ReferenceObjectForEquatableTestScenarios.HeaderStyle,
                                ReferenceObjectForEquatableTestScenarios.CssHeaderClass,
                                ReferenceObjectForEquatableTestScenarios.BodyStyle,
                                A.Dummy<TableColumn>().Whose(_ => !_.CssBodyClass.IsEqualTo(ReferenceObjectForEquatableTestScenarios.CssBodyClass)).CssBodyClass,
                                ReferenceObjectForEquatableTestScenarios.FooterStyle,
                                ReferenceObjectForEquatableTestScenarios.CssFooterClass,
                                ReferenceObjectForEquatableTestScenarios.Colspan,
                                ReferenceObjectForEquatableTestScenarios.Rowspan,
                                ReferenceObjectForEquatableTestScenarios.IsFrozen,
                                ReferenceObjectForEquatableTestScenarios.AlignFrozen,
                                ReferenceObjectForEquatableTestScenarios.IsHidden),
                        new TableColumn(
                                ReferenceObjectForEquatableTestScenarios.Id,
                                ReferenceObjectForEquatableTestScenarios.DataType,
                                ReferenceObjectForEquatableTestScenarios.IsSortable,
                                ReferenceObjectForEquatableTestScenarios.SortMode,
                                ReferenceObjectForEquatableTestScenarios.IsFilterable,
                                ReferenceObjectForEquatableTestScenarios.FilterMode,
                                ReferenceObjectForEquatableTestScenarios.HeaderText,
                                ReferenceObjectForEquatableTestScenarios.FooterText,
                                ReferenceObjectForEquatableTestScenarios.Style,
                                ReferenceObjectForEquatableTestScenarios.CssClass,
                                ReferenceObjectForEquatableTestScenarios.HeaderStyle,
                                ReferenceObjectForEquatableTestScenarios.CssHeaderClass,
                                ReferenceObjectForEquatableTestScenarios.BodyStyle,
                                ReferenceObjectForEquatableTestScenarios.CssBodyClass,
                                A.Dummy<TableColumn>().Whose(_ => !_.FooterStyle.IsEqualTo(ReferenceObjectForEquatableTestScenarios.FooterStyle)).FooterStyle,
                                ReferenceObjectForEquatableTestScenarios.CssFooterClass,
                                ReferenceObjectForEquatableTestScenarios.Colspan,
                                ReferenceObjectForEquatableTestScenarios.Rowspan,
                                ReferenceObjectForEquatableTestScenarios.IsFrozen,
                                ReferenceObjectForEquatableTestScenarios.AlignFrozen,
                                ReferenceObjectForEquatableTestScenarios.IsHidden),
                        new TableColumn(
                                ReferenceObjectForEquatableTestScenarios.Id,
                                ReferenceObjectForEquatableTestScenarios.DataType,
                                ReferenceObjectForEquatableTestScenarios.IsSortable,
                                ReferenceObjectForEquatableTestScenarios.SortMode,
                                ReferenceObjectForEquatableTestScenarios.IsFilterable,
                                ReferenceObjectForEquatableTestScenarios.FilterMode,
                                ReferenceObjectForEquatableTestScenarios.HeaderText,
                                ReferenceObjectForEquatableTestScenarios.FooterText,
                                ReferenceObjectForEquatableTestScenarios.Style,
                                ReferenceObjectForEquatableTestScenarios.CssClass,
                                ReferenceObjectForEquatableTestScenarios.HeaderStyle,
                                ReferenceObjectForEquatableTestScenarios.CssHeaderClass,
                                ReferenceObjectForEquatableTestScenarios.BodyStyle,
                                ReferenceObjectForEquatableTestScenarios.CssBodyClass,
                                ReferenceObjectForEquatableTestScenarios.FooterStyle,
                                A.Dummy<TableColumn>().Whose(_ => !_.CssFooterClass.IsEqualTo(ReferenceObjectForEquatableTestScenarios.CssFooterClass)).CssFooterClass,
                                ReferenceObjectForEquatableTestScenarios.Colspan,
                                ReferenceObjectForEquatableTestScenarios.Rowspan,
                                ReferenceObjectForEquatableTestScenarios.IsFrozen,
                                ReferenceObjectForEquatableTestScenarios.AlignFrozen,
                                ReferenceObjectForEquatableTestScenarios.IsHidden),
                        new TableColumn(
                                ReferenceObjectForEquatableTestScenarios.Id,
                                ReferenceObjectForEquatableTestScenarios.DataType,
                                ReferenceObjectForEquatableTestScenarios.IsSortable,
                                ReferenceObjectForEquatableTestScenarios.SortMode,
                                ReferenceObjectForEquatableTestScenarios.IsFilterable,
                                ReferenceObjectForEquatableTestScenarios.FilterMode,
                                ReferenceObjectForEquatableTestScenarios.HeaderText,
                                ReferenceObjectForEquatableTestScenarios.FooterText,
                                ReferenceObjectForEquatableTestScenarios.Style,
                                ReferenceObjectForEquatableTestScenarios.CssClass,
                                ReferenceObjectForEquatableTestScenarios.HeaderStyle,
                                ReferenceObjectForEquatableTestScenarios.CssHeaderClass,
                                ReferenceObjectForEquatableTestScenarios.BodyStyle,
                                ReferenceObjectForEquatableTestScenarios.CssBodyClass,
                                ReferenceObjectForEquatableTestScenarios.FooterStyle,
                                ReferenceObjectForEquatableTestScenarios.CssFooterClass,
                                A.Dummy<TableColumn>().Whose(_ => !_.Colspan.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Colspan)).Colspan,
                                ReferenceObjectForEquatableTestScenarios.Rowspan,
                                ReferenceObjectForEquatableTestScenarios.IsFrozen,
                                ReferenceObjectForEquatableTestScenarios.AlignFrozen,
                                ReferenceObjectForEquatableTestScenarios.IsHidden),
                        new TableColumn(
                                ReferenceObjectForEquatableTestScenarios.Id,
                                ReferenceObjectForEquatableTestScenarios.DataType,
                                ReferenceObjectForEquatableTestScenarios.IsSortable,
                                ReferenceObjectForEquatableTestScenarios.SortMode,
                                ReferenceObjectForEquatableTestScenarios.IsFilterable,
                                ReferenceObjectForEquatableTestScenarios.FilterMode,
                                ReferenceObjectForEquatableTestScenarios.HeaderText,
                                ReferenceObjectForEquatableTestScenarios.FooterText,
                                ReferenceObjectForEquatableTestScenarios.Style,
                                ReferenceObjectForEquatableTestScenarios.CssClass,
                                ReferenceObjectForEquatableTestScenarios.HeaderStyle,
                                ReferenceObjectForEquatableTestScenarios.CssHeaderClass,
                                ReferenceObjectForEquatableTestScenarios.BodyStyle,
                                ReferenceObjectForEquatableTestScenarios.CssBodyClass,
                                ReferenceObjectForEquatableTestScenarios.FooterStyle,
                                ReferenceObjectForEquatableTestScenarios.CssFooterClass,
                                ReferenceObjectForEquatableTestScenarios.Colspan,
                                A.Dummy<TableColumn>().Whose(_ => !_.Rowspan.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Rowspan)).Rowspan,
                                ReferenceObjectForEquatableTestScenarios.IsFrozen,
                                ReferenceObjectForEquatableTestScenarios.AlignFrozen,
                                ReferenceObjectForEquatableTestScenarios.IsHidden),
                        new TableColumn(
                                ReferenceObjectForEquatableTestScenarios.Id,
                                ReferenceObjectForEquatableTestScenarios.DataType,
                                ReferenceObjectForEquatableTestScenarios.IsSortable,
                                ReferenceObjectForEquatableTestScenarios.SortMode,
                                ReferenceObjectForEquatableTestScenarios.IsFilterable,
                                ReferenceObjectForEquatableTestScenarios.FilterMode,
                                ReferenceObjectForEquatableTestScenarios.HeaderText,
                                ReferenceObjectForEquatableTestScenarios.FooterText,
                                ReferenceObjectForEquatableTestScenarios.Style,
                                ReferenceObjectForEquatableTestScenarios.CssClass,
                                ReferenceObjectForEquatableTestScenarios.HeaderStyle,
                                ReferenceObjectForEquatableTestScenarios.CssHeaderClass,
                                ReferenceObjectForEquatableTestScenarios.BodyStyle,
                                ReferenceObjectForEquatableTestScenarios.CssBodyClass,
                                ReferenceObjectForEquatableTestScenarios.FooterStyle,
                                ReferenceObjectForEquatableTestScenarios.CssFooterClass,
                                ReferenceObjectForEquatableTestScenarios.Colspan,
                                ReferenceObjectForEquatableTestScenarios.Rowspan,
                                A.Dummy<TableColumn>().Whose(_ => !_.IsFrozen.IsEqualTo(ReferenceObjectForEquatableTestScenarios.IsFrozen)).IsFrozen,
                                ReferenceObjectForEquatableTestScenarios.AlignFrozen,
                                ReferenceObjectForEquatableTestScenarios.IsHidden),
                        new TableColumn(
                                ReferenceObjectForEquatableTestScenarios.Id,
                                ReferenceObjectForEquatableTestScenarios.DataType,
                                ReferenceObjectForEquatableTestScenarios.IsSortable,
                                ReferenceObjectForEquatableTestScenarios.SortMode,
                                ReferenceObjectForEquatableTestScenarios.IsFilterable,
                                ReferenceObjectForEquatableTestScenarios.FilterMode,
                                ReferenceObjectForEquatableTestScenarios.HeaderText,
                                ReferenceObjectForEquatableTestScenarios.FooterText,
                                ReferenceObjectForEquatableTestScenarios.Style,
                                ReferenceObjectForEquatableTestScenarios.CssClass,
                                ReferenceObjectForEquatableTestScenarios.HeaderStyle,
                                ReferenceObjectForEquatableTestScenarios.CssHeaderClass,
                                ReferenceObjectForEquatableTestScenarios.BodyStyle,
                                ReferenceObjectForEquatableTestScenarios.CssBodyClass,
                                ReferenceObjectForEquatableTestScenarios.FooterStyle,
                                ReferenceObjectForEquatableTestScenarios.CssFooterClass,
                                ReferenceObjectForEquatableTestScenarios.Colspan,
                                ReferenceObjectForEquatableTestScenarios.Rowspan,
                                ReferenceObjectForEquatableTestScenarios.IsFrozen,
                                A.Dummy<TableColumn>().Whose(_ => !_.AlignFrozen.IsEqualTo(ReferenceObjectForEquatableTestScenarios.AlignFrozen)).AlignFrozen,
                                ReferenceObjectForEquatableTestScenarios.IsHidden),
                        new TableColumn(
                                ReferenceObjectForEquatableTestScenarios.Id,
                                ReferenceObjectForEquatableTestScenarios.DataType,
                                ReferenceObjectForEquatableTestScenarios.IsSortable,
                                ReferenceObjectForEquatableTestScenarios.SortMode,
                                ReferenceObjectForEquatableTestScenarios.IsFilterable,
                                ReferenceObjectForEquatableTestScenarios.FilterMode,
                                ReferenceObjectForEquatableTestScenarios.HeaderText,
                                ReferenceObjectForEquatableTestScenarios.FooterText,
                                ReferenceObjectForEquatableTestScenarios.Style,
                                ReferenceObjectForEquatableTestScenarios.CssClass,
                                ReferenceObjectForEquatableTestScenarios.HeaderStyle,
                                ReferenceObjectForEquatableTestScenarios.CssHeaderClass,
                                ReferenceObjectForEquatableTestScenarios.BodyStyle,
                                ReferenceObjectForEquatableTestScenarios.CssBodyClass,
                                ReferenceObjectForEquatableTestScenarios.FooterStyle,
                                ReferenceObjectForEquatableTestScenarios.CssFooterClass,
                                ReferenceObjectForEquatableTestScenarios.Colspan,
                                ReferenceObjectForEquatableTestScenarios.Rowspan,
                                ReferenceObjectForEquatableTestScenarios.IsFrozen,
                                ReferenceObjectForEquatableTestScenarios.AlignFrozen,
                                A.Dummy<TableColumn>().Whose(_ => !_.IsHidden.IsEqualTo(ReferenceObjectForEquatableTestScenarios.IsHidden)).IsHidden),
                    },
                    ObjectsThatAreNotOfTheSameTypeAsReferenceObject = new object[]
                    {
                        A.Dummy<object>(),
                        A.Dummy<string>(),
                        A.Dummy<int>(),
                        A.Dummy<int?>(),
                        A.Dummy<Guid>(),
                    },
                });

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Structural
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void TableColumn___Should_implement_IModel_of_TableColumn___When_reflecting()
            {
                // Arrange
                var type = typeof(TableColumn);

                var expectedModelMethods = typeof(IModel<TableColumn>).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethodsFiltered(MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IModel<TableColumn>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void TableColumn___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(TableColumn);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class StringRepresentation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ToString___Should_generate_friendly_string_representation_of_object___When_called()
            {
                var scenarios = StringRepresentationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.ToString();

                    // Assert
                    actual.AsTest().Must().BeEqualTo(scenario.ExpectedStringRepresentation, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Constructing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Constructor___Should_throw___When_parameters_are_not_valid()
            {
                var scenarios = ConstructorArgumentValidationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = Record.Exception(scenario.ConstructionFunc);

                    // Assert
                    actual.AsTest().Must().BeOfType(scenario.ExpectedExceptionType, because: scenario.Id);

                    foreach(var expected in scenario.ExpectedExceptionMessageContains ?? new List<string>())
                    {
                        actual.Message.AsTest().Must().ContainString(expected, because: scenario.Id);
                    }

                    if (scenario.ExpectedExceptionMessageEquals != null)
                    {
                        actual.Message.AsTest().Must().BeEqualTo(scenario.ExpectedExceptionMessageEquals, because: scenario.Id);
                    }
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            [SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals", MessageId = "referenceObject")]
            public static void Properties___Should_be_assigned_by_constructor_to_expected_value___When_getting()
            {
                var scenarios = ConstructorPropertyAssignmentTestScenarios.ValidateAndPrepareForTesting();

                var asTestMethodInfo = typeof(WorkflowExtensions).GetMethodFiltered(nameof(WorkflowExtensions.AsTest));

                var beEqualToMethodInfo = typeof(Verifications).GetMethodFiltered(nameof(Verifications.BeEqualTo));

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if ((scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.NoPropertiesAssignedInConstructorScenarioPropertyName) || (scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioPropertyName))
                    {
                        continue;
                    }

                    // Act
                    var actual = scenario.Property.GetValue(scenario.SystemUnderTest);

                    // Assert
                    // When the scenario specifies CompareActualToExpectedUsing.DefaultStrategy, ValidateAndPrepareForTesting()
                    // will check if ExpectedPropertyValue == null.  If so, it sets CompareActualToExpectedUsing = ReferenceEquality.
                    // If not, then it checks the runtime type of ExpectedPropertyValue and if it's a value type,
                    // then it sets CompareActualToExpectedUsing = ValueEquality, otherwise it uses ValueEquality.
                    // So a boxed value type is handled properly (using ValueEquality instead of ReferenceEquality).
                    if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ValueEquality)
                    {
                        // The below reflection code is used in lieu of the following single line of code
                        // so that equality is determined based on the property type instead of using
                        // OBeautifulCode.Equality.Recipes.ObjectEqualityComparer, which will return false
                        // when the objects being compared have different runtime types.  For example, if
                        // the property type is IReadOnlyCollection<string> and we are comparing an empty array
                        // an empty List, the assertion below would fail inappropriately.
                        // actual.AsTest().Must().BeEqualTo(scenario.ExpectedPropertyValue, because: scenario.Id);

                        var propertyType = scenario.Property.PropertyType;

                        var asTestMethodInfoToInvoke = asTestMethodInfo.MakeGenericMethod(propertyType);

                        var assertionTracker = asTestMethodInfoToInvoke.Invoke(null, new[] { actual, Type.Missing });

                        assertionTracker.Must();

                        var mustBeEqualToMethodInfoToInvoke = beEqualToMethodInfo.MakeGenericMethod(propertyType);

                        mustBeEqualToMethodInfoToInvoke.Invoke(null, new[]{ assertionTracker, scenario.ExpectedPropertyValue, scenario.Id, Type.Missing, Type.Missing });
                    }
                    else if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ReferenceEquality)
                    {
                        actual.AsTest().Must().BeSameReferenceAs(scenario.ExpectedPropertyValue, because: scenario.Id);
                    }
                    else
                    {
                        throw new NotSupportedException("This CompareActualToExpectedUsing is not supported: " + scenario.CompareActualToExpectedUsing);
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Cloning
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Clone___Should_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<TableColumn>();

                // Act
                var actual = (TableColumn)systemUnderTest.Clone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepClone___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<TableColumn>();

                // Act
                var actual = systemUnderTest.DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);

                if (systemUnderTest.Style == null)
                {
                    actual.Style.AsTest().Must().BeNull();
                }
                else if (!actual.Style.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Style.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Style);
                }

                if (systemUnderTest.HeaderStyle == null)
                {
                    actual.HeaderStyle.AsTest().Must().BeNull();
                }
                else if (!actual.HeaderStyle.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.HeaderStyle.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.HeaderStyle);
                }

                if (systemUnderTest.BodyStyle == null)
                {
                    actual.BodyStyle.AsTest().Must().BeNull();
                }
                else if (!actual.BodyStyle.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.BodyStyle.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.BodyStyle);
                }

                if (systemUnderTest.FooterStyle == null)
                {
                    actual.FooterStyle.AsTest().Must().BeNull();
                }
                else if (!actual.FooterStyle.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.FooterStyle.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.FooterStyle);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepCloneWith___Should_deep_clone_object_and_replace_the_associated_property_with_the_provided_value___When_called()
            {
                var propertyNames = new string[] { "Id", "DataType", "IsSortable", "SortMode", "IsFilterable", "FilterMode", "HeaderText", "FooterText", "Style", "CssClass", "HeaderStyle", "CssHeaderClass", "BodyStyle", "CssBodyClass", "FooterStyle", "CssFooterClass", "Colspan", "Rowspan", "IsFrozen", "AlignFrozen", "IsHidden" };

                var scenarios = DeepCloneWithTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if (scenario.WithPropertyName == DeepCloneWithTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioWithPropertyName)
                    {
                        continue;
                    }

                    // Act
                    var actual = (TableColumn)scenario.DeepCloneWithMethod.Invoke(scenario.SystemUnderTest, new[] { scenario.WithValue });

                    // Assert
                    foreach(var propertyName in propertyNames)
                    {
                        var propertyInfo = typeof(TableColumn).GetPropertyFiltered(propertyName, MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public);

                        var actualPropertyValue = propertyInfo.GetValue(actual);

                        var comparisonValue = propertyName == scenario.WithPropertyName
                            ? scenario.WithValue
                            : propertyInfo.GetValue(scenario.SystemUnderTest);

                        if (actualPropertyValue == null)
                        {
                            comparisonValue.Must().BeNull(because: scenario.Id);
                        }
                        else
                        {
                            // We use the runtime type here to solve for the case where the object is a boxed value type.
                            var actualPropertyValueRuntimeType = actualPropertyValue.GetType();

                            if (actualPropertyValueRuntimeType.IsValueType || (actualPropertyValueRuntimeType == typeof(string)))
                            {
                                // actualPropertyValue and comparisonValue are declared as typeof(object), but
                                // BeEqualTo (which uses IsEqualTo), will do the right thing by comparing the
                                // objects using their runtime type.
                                actualPropertyValue.AsTest().Must().BeEqualTo(comparisonValue, because: scenario.Id);
                            }
                            else
                            {
                                if (propertyName == scenario.WithPropertyName)
                                {
                                    actualPropertyValue.AsTest().Must().BeSameReferenceAs(comparisonValue, because: scenario.Id);
                                }
                                else
                                {
                                    actualPropertyValue.AsTest().Must().NotBeSameReferenceAs(comparisonValue, because: scenario.Id);
                                }
                            }
                        }
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Serialization
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<TableColumn>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<TableColumn>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<TableColumn>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<TableColumn>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Equality
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                TableColumn systemUnderTest1 = null;
                TableColumn systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 == systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    TableColumn systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest == scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject == systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeFalse(because: scenario.Id);
                    actual2.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject == scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                TableColumn systemUnderTest1 = null;
                TableColumn systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 != systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    TableColumn systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest != scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject != systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeTrue(because: scenario.Id);
                    actual2.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject != scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_TableColumn___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    TableColumn systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals(systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_TableColumn___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_TableColumn___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_TableColumn___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_TableColumn___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)null);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Hashing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_not_be_equal_for_two_objects___When_objects_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var unexpected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().NotContainElement(unexpected, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_be_equal_for_two_objects___When_objects_have_the_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var expected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(expected, because: scenario.Id);
                }
            }
        }
    }
}