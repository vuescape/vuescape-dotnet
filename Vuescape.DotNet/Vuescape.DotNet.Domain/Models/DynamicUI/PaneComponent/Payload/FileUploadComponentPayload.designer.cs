// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.195.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Vuescape.DotNet.Domain
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;

    using global::OBeautifulCode.Cloning.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Type;
    using global::OBeautifulCode.Type.Recipes;

    using static global::System.FormattableString;

    [Serializable]
    public partial class FileUploadComponentPayload : IModel<FileUploadComponentPayload>
    {
        /// <summary>
        /// Determines whether two objects of type <see cref="FileUploadComponentPayload"/> are equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are equal; otherwise false.</returns>
        public static bool operator ==(FileUploadComponentPayload left, FileUploadComponentPayload right)
        {
            if (ReferenceEquals(left, right))
            {
                return true;
            }

            if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
            {
                return false;
            }

            var result = left.Equals(right);

            return result;
        }

        /// <summary>
        /// Determines whether two objects of type <see cref="FileUploadComponentPayload"/> are not equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are not equal; otherwise false.</returns>
        public static bool operator !=(FileUploadComponentPayload left, FileUploadComponentPayload right) => !(left == right);

        /// <inheritdoc />
        public bool Equals(FileUploadComponentPayload other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (ReferenceEquals(other, null))
            {
                return false;
            }

            var result = this.Id.IsEqualTo(other.Id, StringComparer.Ordinal)
                      && this.Title.IsEqualTo(other.Title, StringComparer.Ordinal)
                      && this.IsRequired.IsEqualTo(other.IsRequired)
                      && this.UploadInstructionText.IsEqualTo(other.UploadInstructionText, StringComparer.Ordinal)
                      && this.MaxFileSizeInBytes.IsEqualTo(other.MaxFileSizeInBytes)
                      && this.AcceptFileTypeExtensions.IsEqualTo(other.AcceptFileTypeExtensions);

            return result;
        }

        /// <inheritdoc />
        public override bool Equals(object obj) => this == (obj as FileUploadComponentPayload);

        /// <inheritdoc />
        public override int GetHashCode() => HashCodeHelper.Initialize()
            .Hash(this.Id)
            .Hash(this.Title)
            .Hash(this.IsRequired)
            .Hash(this.UploadInstructionText)
            .Hash(this.MaxFileSizeInBytes)
            .Hash(this.AcceptFileTypeExtensions)
            .Value;

        /// <inheritdoc />
        public object Clone() => this.DeepClone();

        /// <inheritdoc />
        public FileUploadComponentPayload DeepClone()
        {
            var result = new FileUploadComponentPayload(
                                 this.Id?.DeepClone(),
                                 this.Title?.DeepClone(),
                                 this.IsRequired.DeepClone(),
                                 this.UploadInstructionText?.DeepClone(),
                                 this.MaxFileSizeInBytes?.DeepClone(),
                                 this.AcceptFileTypeExtensions?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Id" />.
        /// </summary>
        /// <param name="id">The new <see cref="Id" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="FileUploadComponentPayload" /> using the specified <paramref name="id" /> for <see cref="Id" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public FileUploadComponentPayload DeepCloneWithId(string id)
        {
            var result = new FileUploadComponentPayload(
                                 id,
                                 this.Title?.DeepClone(),
                                 this.IsRequired.DeepClone(),
                                 this.UploadInstructionText?.DeepClone(),
                                 this.MaxFileSizeInBytes?.DeepClone(),
                                 this.AcceptFileTypeExtensions?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Title" />.
        /// </summary>
        /// <param name="title">The new <see cref="Title" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="FileUploadComponentPayload" /> using the specified <paramref name="title" /> for <see cref="Title" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public FileUploadComponentPayload DeepCloneWithTitle(string title)
        {
            var result = new FileUploadComponentPayload(
                                 this.Id?.DeepClone(),
                                 title,
                                 this.IsRequired.DeepClone(),
                                 this.UploadInstructionText?.DeepClone(),
                                 this.MaxFileSizeInBytes?.DeepClone(),
                                 this.AcceptFileTypeExtensions?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="IsRequired" />.
        /// </summary>
        /// <param name="isRequired">The new <see cref="IsRequired" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="FileUploadComponentPayload" /> using the specified <paramref name="isRequired" /> for <see cref="IsRequired" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public FileUploadComponentPayload DeepCloneWithIsRequired(bool isRequired)
        {
            var result = new FileUploadComponentPayload(
                                 this.Id?.DeepClone(),
                                 this.Title?.DeepClone(),
                                 isRequired,
                                 this.UploadInstructionText?.DeepClone(),
                                 this.MaxFileSizeInBytes?.DeepClone(),
                                 this.AcceptFileTypeExtensions?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="UploadInstructionText" />.
        /// </summary>
        /// <param name="uploadInstructionText">The new <see cref="UploadInstructionText" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="FileUploadComponentPayload" /> using the specified <paramref name="uploadInstructionText" /> for <see cref="UploadInstructionText" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public FileUploadComponentPayload DeepCloneWithUploadInstructionText(string uploadInstructionText)
        {
            var result = new FileUploadComponentPayload(
                                 this.Id?.DeepClone(),
                                 this.Title?.DeepClone(),
                                 this.IsRequired.DeepClone(),
                                 uploadInstructionText,
                                 this.MaxFileSizeInBytes?.DeepClone(),
                                 this.AcceptFileTypeExtensions?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="MaxFileSizeInBytes" />.
        /// </summary>
        /// <param name="maxFileSizeInBytes">The new <see cref="MaxFileSizeInBytes" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="FileUploadComponentPayload" /> using the specified <paramref name="maxFileSizeInBytes" /> for <see cref="MaxFileSizeInBytes" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public FileUploadComponentPayload DeepCloneWithMaxFileSizeInBytes(long? maxFileSizeInBytes)
        {
            var result = new FileUploadComponentPayload(
                                 this.Id?.DeepClone(),
                                 this.Title?.DeepClone(),
                                 this.IsRequired.DeepClone(),
                                 this.UploadInstructionText?.DeepClone(),
                                 maxFileSizeInBytes,
                                 this.AcceptFileTypeExtensions?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="AcceptFileTypeExtensions" />.
        /// </summary>
        /// <param name="acceptFileTypeExtensions">The new <see cref="AcceptFileTypeExtensions" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="FileUploadComponentPayload" /> using the specified <paramref name="acceptFileTypeExtensions" /> for <see cref="AcceptFileTypeExtensions" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public FileUploadComponentPayload DeepCloneWithAcceptFileTypeExtensions(IReadOnlyList<string> acceptFileTypeExtensions)
        {
            var result = new FileUploadComponentPayload(
                                 this.Id?.DeepClone(),
                                 this.Title?.DeepClone(),
                                 this.IsRequired.DeepClone(),
                                 this.UploadInstructionText?.DeepClone(),
                                 this.MaxFileSizeInBytes?.DeepClone(),
                                 acceptFileTypeExtensions);

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        public override string ToString()
        {
            var result = Invariant($"Vuescape.DotNet.Domain.FileUploadComponentPayload: Id = {this.Id?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Title = {this.Title?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, IsRequired = {this.IsRequired.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, UploadInstructionText = {this.UploadInstructionText?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, MaxFileSizeInBytes = {this.MaxFileSizeInBytes?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, AcceptFileTypeExtensions = {this.AcceptFileTypeExtensions?.ToString() ?? "<null>"}.");

            return result;
        }
    }
}