// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.191.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Vuescape.DotNet.Domain
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;

    using global::OBeautifulCode.Cloning.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Type;
    using global::OBeautifulCode.Type.Recipes;

    using static global::System.FormattableString;

    [Serializable]
    public partial class CssStyles : IModel<CssStyles>
    {
        /// <summary>
        /// Determines whether two objects of type <see cref="CssStyles"/> are equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are equal; otherwise false.</returns>
        public static bool operator ==(CssStyles left, CssStyles right)
        {
            if (ReferenceEquals(left, right))
            {
                return true;
            }

            if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
            {
                return false;
            }

            var result = left.Equals(right);

            return result;
        }

        /// <summary>
        /// Determines whether two objects of type <see cref="CssStyles"/> are not equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are not equal; otherwise false.</returns>
        public static bool operator !=(CssStyles left, CssStyles right) => !(left == right);

        /// <inheritdoc />
        public bool Equals(CssStyles other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (ReferenceEquals(other, null))
            {
                return false;
            }

            var result = this.Table.IsEqualTo(other.Table)
                      && this.AllRows.IsEqualTo(other.AllRows)
                      && this.AllCells.IsEqualTo(other.AllCells)
                      && this.CurrentRow.IsEqualTo(other.CurrentRow)
                      && this.CurrentRowCells.IsEqualTo(other.CurrentRowCells)
                      && this.CurrentCell.IsEqualTo(other.CurrentCell);

            return result;
        }

        /// <inheritdoc />
        public override bool Equals(object obj) => this == (obj as CssStyles);

        /// <inheritdoc />
        public override int GetHashCode() => HashCodeHelper.Initialize()
            .Hash(this.Table)
            .Hash(this.AllRows)
            .Hash(this.AllCells)
            .Hash(this.CurrentRow)
            .Hash(this.CurrentRowCells)
            .Hash(this.CurrentCell)
            .Value;

        /// <inheritdoc />
        public object Clone() => this.DeepClone();

        /// <inheritdoc />
        public CssStyles DeepClone()
        {
            var result = new CssStyles(
                                 this.Table?.DeepClone(),
                                 this.AllRows?.DeepClone(),
                                 this.AllCells?.DeepClone(),
                                 this.CurrentRow?.DeepClone(),
                                 this.CurrentRowCells?.DeepClone(),
                                 this.CurrentCell?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Table" />.
        /// </summary>
        /// <param name="table">The new <see cref="Table" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="CssStyles" /> using the specified <paramref name="table" /> for <see cref="Table" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public CssStyles DeepCloneWithTable(CssStyleWrapper table)
        {
            var result = new CssStyles(
                                 table,
                                 this.AllRows?.DeepClone(),
                                 this.AllCells?.DeepClone(),
                                 this.CurrentRow?.DeepClone(),
                                 this.CurrentRowCells?.DeepClone(),
                                 this.CurrentCell?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="AllRows" />.
        /// </summary>
        /// <param name="allRows">The new <see cref="AllRows" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="CssStyles" /> using the specified <paramref name="allRows" /> for <see cref="AllRows" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public CssStyles DeepCloneWithAllRows(IReadOnlyList<CssStyleWrapper> allRows)
        {
            var result = new CssStyles(
                                 this.Table?.DeepClone(),
                                 allRows,
                                 this.AllCells?.DeepClone(),
                                 this.CurrentRow?.DeepClone(),
                                 this.CurrentRowCells?.DeepClone(),
                                 this.CurrentCell?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="AllCells" />.
        /// </summary>
        /// <param name="allCells">The new <see cref="AllCells" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="CssStyles" /> using the specified <paramref name="allCells" /> for <see cref="AllCells" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public CssStyles DeepCloneWithAllCells(IReadOnlyList<IReadOnlyList<CssStyleWrapper>> allCells)
        {
            var result = new CssStyles(
                                 this.Table?.DeepClone(),
                                 this.AllRows?.DeepClone(),
                                 allCells,
                                 this.CurrentRow?.DeepClone(),
                                 this.CurrentRowCells?.DeepClone(),
                                 this.CurrentCell?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="CurrentRow" />.
        /// </summary>
        /// <param name="currentRow">The new <see cref="CurrentRow" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="CssStyles" /> using the specified <paramref name="currentRow" /> for <see cref="CurrentRow" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public CssStyles DeepCloneWithCurrentRow(CssStyleWrapper currentRow)
        {
            var result = new CssStyles(
                                 this.Table?.DeepClone(),
                                 this.AllRows?.DeepClone(),
                                 this.AllCells?.DeepClone(),
                                 currentRow,
                                 this.CurrentRowCells?.DeepClone(),
                                 this.CurrentCell?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="CurrentRowCells" />.
        /// </summary>
        /// <param name="currentRowCells">The new <see cref="CurrentRowCells" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="CssStyles" /> using the specified <paramref name="currentRowCells" /> for <see cref="CurrentRowCells" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public CssStyles DeepCloneWithCurrentRowCells(IReadOnlyList<CssStyleWrapper> currentRowCells)
        {
            var result = new CssStyles(
                                 this.Table?.DeepClone(),
                                 this.AllRows?.DeepClone(),
                                 this.AllCells?.DeepClone(),
                                 this.CurrentRow?.DeepClone(),
                                 currentRowCells,
                                 this.CurrentCell?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="CurrentCell" />.
        /// </summary>
        /// <param name="currentCell">The new <see cref="CurrentCell" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="CssStyles" /> using the specified <paramref name="currentCell" /> for <see cref="CurrentCell" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public CssStyles DeepCloneWithCurrentCell(CssStyleWrapper currentCell)
        {
            var result = new CssStyles(
                                 this.Table?.DeepClone(),
                                 this.AllRows?.DeepClone(),
                                 this.AllCells?.DeepClone(),
                                 this.CurrentRow?.DeepClone(),
                                 this.CurrentRowCells?.DeepClone(),
                                 currentCell);

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        public override string ToString()
        {
            var result = Invariant($"Vuescape.DotNet.Domain.CssStyles: Table = {this.Table?.ToString() ?? "<null>"}, AllRows = {this.AllRows?.ToString() ?? "<null>"}, AllCells = {this.AllCells?.ToString() ?? "<null>"}, CurrentRow = {this.CurrentRow?.ToString() ?? "<null>"}, CurrentRowCells = {this.CurrentRowCells?.ToString() ?? "<null>"}, CurrentCell = {this.CurrentCell?.ToString() ?? "<null>"}.");

            return result;
        }
    }
}